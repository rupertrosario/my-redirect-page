# Cohesity Helios â€“ Cluster Interface Health (Original Script + On-the-fly Summary)
# ----------------------------------------------------------
# - Loads API key from your file path (as provided).
# - Fetches all clusters (name + id) from /v2/mcm/cluster-mgmt/info.
# - For each cluster, calls /irisservices/api/v1/public/interface with accessClusterId.
# - As soon as a down interface is detected, it is reported immediately.
# - Finally prints structured per-cluster summary (alphabetical).

# =========================
# 0) API Key from your path
# =========================
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found at $apikeypath" }
$ApiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $ApiKey }

# =========================================================
# 1) Get Clusters (ClusterName + ClusterId)
# =========================================================
$url = "https://helios.cohesity.com/v2/mcm/cluster-mgmt/info"
$response  = Invoke-WebRequest -Method Get -Uri $url -Headers $commonHeaders
$json_clu  = $response.Content | ConvertFrom-Json
$json_clus = $json_clu.cohesityClusters

$DownRows = @()

foreach ($clus in $json_clus) {
    $cluster_name = $clus.ClusterName
    $cluster_id   = $clus.ClusterId

    $url = "https://helios.cohesity.com/irisservices/api/v1/public/interface"
    $headers = @{ "apiKey" = $ApiKey; "accessClusterId" = $cluster_id }
    $body = @{
        bondInterfaceOnly        = "true"
        ifaceGroupAssignedOnly   = "true"
        includeUplinkSwitchInfo  = "true"
        includeBondSlavesDetails = "true"
    }

    $response = Invoke-WebRequest -Method Get -Uri $url -Headers $headers -Body $body
    $json = $response.Content | ConvertFrom-Json

    foreach ($node in $json) {
        $bondSlaves = $node.interfaces.bondSlaves
        $slaveStates = $node.interfaces.bondSlavesDetails.linkState

        for ($i=0; $i -lt $bondSlaves.Count; $i++) {
            $slave = $bondSlaves[$i]
            $state = $slaveStates[$i]
            if ($state -match 'down|error|disabled|unknown') {
                Write-Host "[ALERT] Cluster $cluster_name: Interface $slave is $state" -ForegroundColor Red
                $DownRows += [PSCustomObject]@{
                    Cluster  = $cluster_name
                    NodeID   = $node.nodeId
                    NodeIP   = $node.nodeIp
                    Slave    = $slave
                    Status   = $state
                }
            }
        }
    }
}

# ==========================================================
# 2) Per-cluster summary (highlight interfaces that are down)
# ==========================================================
if ($DownRows.Count -gt 0) {
    Write-Host "`nSummary (per cluster):" -ForegroundColor Green
    Write-Host "=========================" -ForegroundColor Green

    $byCluster = $DownRows | Group-Object Cluster | Sort-Object Name

    foreach ($grp in $byCluster) {
        $cName = $grp.Name
        $downCsv = ($grp.Group.Slave | Select-Object -Unique) -join ", "

        Write-Host "Cluster: $cName" -ForegroundColor Cyan
        Write-Host "  Status           : Down interfaces detected" -ForegroundColor Red
        Write-Host "  Interfaces Down  : $downCsv" -ForegroundColor Yellow
        Write-Host "----------------------------------------"
    }
} else {
    Write-Host "All clusters: Everything is up" -ForegroundColor Green
}
