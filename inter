# Cohesity Helios â€“ Cluster Interface Health (Full Dump + Summary)
# ----------------------------------------------------------
# - Loads API key from your file path (as provided).
# - Fetches all clusters (name + id) from /v2/mcm/cluster-mgmt/info.
# - For each cluster, calls /irisservices/api/v1/public/interface with accessClusterId.
# - Collects ALL interface rows into $AllRows.
# - At the end, displays everything on screen.
# - Then checks for failures and prints structured per-cluster summary (alphabetical).

# =========================
# 0) API Key from your path
# =========================
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found at $apikeypath" }
$ApiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $ApiKey }

# =========================================================
# 1) Get Clusters (ClusterName + ClusterId)
# =========================================================
$url = "https://helios.cohesity.com/v2/mcm/cluster-mgmt/info"
$response  = Invoke-WebRequest -Method Get -Uri $url -Headers $commonHeaders
$json_clu  = $response.Content | ConvertFrom-Json
$json_clus = $json_clu.cohesityClusters

$AllRows = New-Object System.Collections.Generic.List[Object]

foreach ($clus in $json_clus) {
    $cluster_name = $clus.ClusterName
    $cluster_id   = $clus.ClusterId

    $url = "https://helios.cohesity.com/irisservices/api/v1/public/interface"
    $headers = @{ "apiKey" = $ApiKey; "accessClusterId" = $cluster_id }
    $body = @{
        bondInterfaceOnly        = "true"
        ifaceGroupAssignedOnly   = "true"
        includeUplinkSwitchInfo  = "true"
        includeBondSlavesDetails = "true"
    }

    $response = Invoke-WebRequest -Method Get -Uri $url -Headers $headers -Body $body
    $json = $response.Content | ConvertFrom-Json

    foreach ($node in $json) {
        $AllRows.Add([PSCustomObject]@{
            Cluster              = $cluster_name
            NodeID               = $node.nodeId
            NodeIP               = $node.nodeIp
            ChassisSerial        = $node.chassisSerial
            BondSlaves           = $node.interfaces.bondSlaves
            SlaveInterfaceStatus = $node.interfaces.bondSlavesDetails.linkState
            SlaveSpeed           = $node.interfaces.bondSlavesDetails.speed
            SlotType             = $node.interfaces.bondSlavesSlotTypes
        })
    }
}

# ==============================
# 2) Print Table (full details)
# ==============================
$AllRows | Sort-Object Cluster | Format-Table -AutoSize

# ==========================================================
# 3) Per-cluster summary (alphabetical, only down interfaces)
# ==========================================================
if ($AllRows.Count -gt 0) {
    Write-Host "`nSummary (per cluster):" -ForegroundColor Green
    Write-Host "=========================" -ForegroundColor Green

    $byCluster = $AllRows | Group-Object Cluster | Sort-Object Name

    foreach ($grp in $byCluster) {
        $cName = $grp.Name

        $slaveNames  = $grp.Group.BondSlaves
        $slaveStates = $grp.Group.SlaveInterfaceStatus

        $downList = @()
        for ($i=0; $i -lt $slaveNames.Count; $i++) {
            $n = $slaveNames[$i]
            $s = $slaveStates[$i]
            if ($s -match 'down|error|disabled|unknown') { $downList += $n }
        }

        $ifaceCount = [int]($slaveNames | Where-Object { $_ } | Measure-Object).Count

        Write-Host "Cluster: $cName" -ForegroundColor Cyan
        Write-Host "  Total Interfaces : $ifaceCount"

        if ($downList.Count -eq 0) {
            Write-Host "  Status           : Everything is up" -ForegroundColor Green
        } else {
            $downCsv = ($downList | Select-Object -Unique) -join ", "
            Write-Host "  Status           : Down interfaces detected" -ForegroundColor Red
            Write-Host "  Interfaces Down  : $downCsv" -ForegroundColor Yellow
        }
        Write-Host "----------------------------------------"
    }
} else {
    Write-Host "No interface data found" -ForegroundColor Yellow
}
