# --- safe epoch -> UTC converter (handles ms or Âµs) ---
function Convert-ToUtcFromEpoch($v) {
    if ($null -eq $v -or $v -eq 0) { return $null }
    try {
        return [DateTimeOffset]::FromUnixTimeMilliseconds([int64]$v).UtcDateTime
    } catch {
        return [DateTimeOffset]::FromUnixTimeMilliseconds([int64]([double]$v / 1000)).UtcDateTime
    }
}

$grouped = $flatRuns | Group-Object RunType
foreach ($g in $grouped) {
    $latestFailed = $g.Group | Where-Object { $_.Status -eq "Failed" } | Sort-Object EndTimeUsecs -Descending | Select-Object -First 1
    if ($null -ne $latestFailed) {
        $hasLaterSuccess = $g.Group | Where-Object {
            $_.Status -eq "Succeeded" -and $_.StartTimeUsecs -gt $latestFailed.EndTimeUsecs
        }
        if (-not $hasLaterSuccess) {
            $estZone  = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
            $startUtc = Convert-ToUtcFromEpoch $latestFailed.StartTimeUsecs
            $endUtc   = Convert-ToUtcFromEpoch $latestFailed.EndTimeUsecs

            $globalFailures += [pscustomobject]@{
                Cluster         = $latestFailed.Cluster
                ProtectionGroup = $latestFailed.ProtectionGroup
                RunType         = $latestFailed.RunType
                Status          = $latestFailed.Status
                Message         = $latestFailed.Message
                StartTime       = if ($startUtc) { [System.TimeZoneInfo]::ConvertTimeFromUtc($startUtc, $estZone) } else { $null }
                EndTime         = if ($endUtc)   { [System.TimeZoneInfo]::ConvertTimeFromUtc($endUtc,   $estZone) } else { $null }
            }
        }
    }
}

# Sort on real datetime, format only at output
# Reset serial counter
$sn = 0

$globalFailures |
    Sort-Object EndTime -Descending |
    Select-Object @{Name='S.No';Expression={ $sn++; $sn }},
                  Cluster, ProtectionGroup, RunType, Status, Message,
                  @{Name='StartTime';Expression={ if ($_.StartTime) { $_.StartTime.ToString("dd/MM/yyyy HH:mm:ss") } }},
                  @{Name='EndTime'  ;Expression={ if ($_.EndTime)   { $_.EndTime  .ToString("dd/MM/yyyy HH:mm:ss") } }} |
    Format-Table -AutoSize
