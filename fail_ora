$grouped = $flatRuns | Group-Object RunType
foreach ($g in $grouped) {
    $latestFailed = $g.Group | Where-Object { $_.Status -eq "Failed" } | Sort-Object EndTimeUsecs -Descending | Select-Object -First 1
    if ($null -ne $latestFailed) {
        $hasLaterSuccess = $g.Group | Where-Object {
            $_.Status -eq "Succeeded" -and $_.StartTimeUsecs -gt $latestFailed.EndTimeUsecs
        }
        if (-not $hasLaterSuccess) {
            $estZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
            $startUtc = ([DateTime]"1970-01-01 00:00:00").AddMilliseconds($latestFailed.StartTimeUsecs)
            $endUtc   = ([DateTime]"1970-01-01 00:00:00").AddMilliseconds($latestFailed.EndTimeUsecs)

            $globalFailures += [pscustomobject]@{
                Cluster         = $latestFailed.Cluster
                ProtectionGroup = $latestFailed.ProtectionGroup
                RunType         = $latestFailed.RunType
                Status          = $latestFailed.Status
                Message         = $latestFailed.Message
                StartTime       = [System.TimeZoneInfo]::ConvertTimeFromUtc($startUtc, $estZone) # datetime
                EndTime         = [System.TimeZoneInfo]::ConvertTimeFromUtc($endUtc, $estZone)   # datetime
            }
        }
    }
}

# Sort correctly and format for display
$globalFailures |
    Sort-Object EndTime -Descending |
    Select-Object Cluster, ProtectionGroup, RunType, Status, Message,
        @{Name='StartTime';Expression={ $_.StartTime.ToString("dd/MM/yyyy HH:mm:ss") }},
        @{Name='EndTime';Expression={ $_.EndTime.ToString("dd/MM/yyyy HH:mm:ss") }} |
    Format-Table -AutoSize
