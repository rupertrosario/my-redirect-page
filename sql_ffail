# -------------------------------------------------------------
# Cohesity SQL Failures ‚Äì Multi-Cluster (Helios)
# Similar to Oracle version (Host + Database mapping)
# -------------------------------------------------------------

$logDirectory = "X:\PowerShell\Data\Cohesity\BackupFailures"
if (-not (Test-Path -Path $logDirectory -PathType Container)) {
    New-Item -Path $logDirectory -ItemType Directory | Out-Null
}

# --- Load API key ---
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found: $apikeypath" }
$apiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $apiKey }

# --- Get all clusters from Helios ---
$url = "https://helios.cohesity.com/v2/mcm/cluster-mgmt/info"
$response = Invoke-WebRequest -Uri $url -Headers $commonHeaders -Method Get
$json_clu = ($response.Content | ConvertFrom-Json).cohesityClusters
if (-not $json_clu) { throw "No clusters returned from Helios." }

# --- Helper for time conversion ---
function Convert-ToLocalFromEpoch($v,$tz){
    if(-not $v -or $v -eq 0){return $null}
    try{
        $utc=[DateTimeOffset]::FromUnixTimeMilliseconds([int64]($v/1000)).UtcDateTime
        if($tz){[System.TimeZoneInfo]::ConvertTimeFromUtc($utc,$tz)}else{$utc.ToLocalTime()}
    }catch{return $null}
}

$tz=[System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
$baseUrl="https://helios.cohesity.com"
$globalFailures=@()

# -------------------------------------------------------------
# Iterate clusters
# -------------------------------------------------------------
foreach($cluster in $json_clu){

    # --- Resolve cluster name ---
    $cluster_name=$cluster.name
    if([string]::IsNullOrWhiteSpace($cluster_name)){$cluster_name=$cluster.clusterName}
    if([string]::IsNullOrWhiteSpace($cluster_name)){$cluster_name=$cluster.displayName}
    if([string]::IsNullOrWhiteSpace($cluster_name)){$cluster_name="Unknown-$($cluster.clusterId)"}
    $cluster_id=$cluster.clusterId

    Write-Host "`nüîπ Processing cluster: $cluster_name" -ForegroundColor Cyan
    $headers=@{apiKey=$apiKey;accessClusterId=$cluster_id}

    # --- Get SQL PGs ---
    $pgResp=Invoke-WebRequest -Uri "$baseUrl/v2/data-protect/protection-groups" -Headers $headers -Body @{
        environments="kSQL";isDeleted="False";isPaused="False";isActive="True"} -Method Get
    $pgs=($pgResp.Content|ConvertFrom-Json).protectionGroups
    if(-not $pgs){Write-Host "‚ö†Ô∏è No SQL PGs found on $cluster_name." -ForegroundColor Yellow;continue}

    foreach($pg in $pgs){
        $pgId=$pg.id
        $pgName=$pg.name
        Write-Host "`nüì¶ Checking PG: $pgName" -ForegroundColor Yellow

        $runUrl="$baseUrl/v2/data-protect/protection-groups/$pgId/runs"
        $runBody=@{
            environments="kSQL"
            isDeleted="False"
            isPaused="False"
            isActive="True"
            numRuns="10"
            excludeNonRestorableRuns="False"
            includeObjectDetails="True"
        }

        try {
            $runResp=Invoke-WebRequest -Uri $runUrl -Headers $headers -Body $runBody -Method Get
            $jsonRuns=$runResp|ConvertFrom-Json
        } catch {
            Write-Host "‚ö†Ô∏è Skipping PG $pgName on $cluster_name due to API error." -ForegroundColor Yellow
            continue
        }

        if(-not $jsonRuns.runs){continue}

        $runs=$jsonRuns.runs|Sort-Object{$_.localBackupInfo[0].startTimeUsecs}
        $runTypes=$runs.localBackupInfo.runType|Select-Object -Unique

        foreach($rType in $runTypes){
            $latestRun=$runs|Where-Object{$_.localBackupInfo[0].runType -eq $rType}|
                        Sort-Object{$_.localBackupInfo[0].endTimeUsecs}-Descending|Select-Object -First 1
            if(-not $latestRun){continue}

            $info=$latestRun.localBackupInfo[0]
            $status=$info.status
            $runType=$info.runType
            $startLocal=Convert-ToLocalFromEpoch $info.startTimeUsecs $tz
            $endLocal=Convert-ToLocalFromEpoch $info.endTimeUsecs $tz

            if($status -eq "Succeeded" -or $status -eq "SucceededWithWarning"){
                Write-Host "‚úÖ $cluster_name ‚Üí $pgName [$rType] ‚Äì Latest run succeeded" -ForegroundColor Green
                continue
            }

            Write-Host "‚ùå $cluster_name ‚Üí $pgName [$rType] ‚Äì Latest run failed, collecting DB details..." -ForegroundColor Red

            if($latestRun.objects){
                $objs=$latestRun.objects

                # Identify Hosts and DBs
                $hosts=$objs|Where-Object{$_.object.environment -eq 'kSQL' -and $_.object.objectType -ne 'kDatabase'}
                $dbs=$objs|Where-Object{$_.object.objectType -in @('kDatabase','kSQL','kSQLDB')}

                # --- Database-level failures ---
                foreach($db in $dbs){
                    $attempts=$db.localSnapshotInfo.failedAttempts
                    if($attempts){
                        foreach($fa in $attempts){
                            $msgClean=($fa.message -replace '[\r\n]+',' ' -replace ',',' ' -replace '"','''').Trim()
                            $parentHost=$hosts|Where-Object{$_.object.id -eq $db.object.sourceId}|Select-Object -First 1
                            $hostname=if($parentHost){$parentHost.object.name}else{"N/A"}

                            $globalFailures+=[pscustomobject]@{
                                Cluster=$cluster_name
                                ProtectionGroup=$pgName
                                RunType=$runType
                                HostName=$hostname
                                DatabaseName=$db.object.name
                                StartTime=$startLocal
                                EndTime=$endLocal
                                FailedMessage=$msgClean
                            }
                        }
                    }
                }

                # --- Host-level failures ---
                foreach($host in $hosts){
                    $attempts=$host.localSnapshotInfo.failedAttempts
                    if($attempts){
                        foreach($fa in $attempts){
                            $msgClean=($fa.message -replace '[\r\n]+',' ' -replace ',',' ' -replace '"','''').Trim()
                            $globalFailures+=[pscustomobject]@{
                                Cluster=$cluster_name
                                ProtectionGroup=$pgName
                                RunType=$runType
                                HostName=$host.object.name
                                DatabaseName="No DBs Discovered"
                                StartTime=$startLocal
                                EndTime=$endLocal
                                FailedMessage=$msgClean
                            }
                        }
                    }
                }
            }
        }
    }
}

# -------------------------------------------------------------
# Output Section
# -------------------------------------------------------------
if($globalFailures.Count -gt 0){
    Write-Host "`nüî• Latest Failed SQL Runs (All Clusters):`n" -ForegroundColor Cyan
    $sorted=$globalFailures|Sort-Object Cluster,ProtectionGroup,EndTime -Descending
    $sorted|Format-Table Cluster,ProtectionGroup,RunType,HostName,DatabaseName,StartTime,EndTime,FailedMessage -AutoSize
}else{
    Write-Host "`n‚úÖ All latest SQL runs succeeded across all clusters." -ForegroundColor Green
}

# --- CSV reference path (no export yet) ---
$timestamp=Get-Date -Format "yyyyMMdd_HHmm"
$csvPath="X:\PowerShell\Data\Cohesity\BackupFailures\BackupFailures_SQL_AllClusters_$timestamp.csv"
Write-Host "`nüìÇ (CSV path ready if needed later): $csvPath" -ForegroundColor Gray
