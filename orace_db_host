# -------------------------------------------------------------
# Cohesity Oracle ‚Äì Latest Failures (All Clusters, Old Logic Retained)
# -------------------------------------------------------------
# ‚úÖ Uses your previous working logic for per-cluster calls
# ‚úÖ Loops through all clusters from Helios
# ‚úÖ Shows DB + Host names
# ‚úÖ Skips if latest runType succeeded
# ‚úÖ Sorted by Cluster, ProtectionGroup, EndTime (desc)
# ‚úÖ Console-only (CSV path retained)
# -------------------------------------------------------------

$baseUrl      = "https://helios.cohesity.com"
$apiKeyPath   = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
$ErrorActionPreference = 'Stop'

# --- Load API Key ---
if (-not (Test-Path $apiKeyPath)) { throw "API key file not found: $apiKeyPath" }
$apiKey   = (Get-Content -Path $apiKeyPath -Raw).Trim()
$headers  = @{ apiKey = $apiKey }

# --- Timezone and helper ---
$tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
function Convert-ToUtcFromEpoch($v) {
    if ($null -eq $v -or $v -eq 0) { return $null }
    try { [DateTimeOffset]::FromUnixTimeMilliseconds([int64]$v).UtcDateTime }
    catch { [DateTimeOffset]::FromUnixTimeMilliseconds([int64]([double]$v / 1000)).UtcDateTime }
}

# --- Get all clusters from Helios ---
Write-Host "`nüåç Fetching clusters from Helios..." -ForegroundColor Cyan
$clusterListUrl = "$baseUrl/v2/mcm/cluster-mgmt/info"
$clusterList = (Invoke-WebRequest -Uri $clusterListUrl -Headers $headers -Method Get).Content | ConvertFrom-Json
$clusters = $clusterList.cohesityClusters | Where-Object { $_.isConnected -eq $true }

if (-not $clusters) { throw "No connected clusters found in Helios." }

$globalFailures = @()

# =============================================================
# LOOP THROUGH CLUSTERS (using old working logic)
# =============================================================
foreach ($cluster in $clusters) {
    $cluster_name = $cluster.name
    $cluster_id   = $cluster.clusterId
    $headersPerCluster = @{ apiKey = $apiKey; accessClusterId = $cluster_id }

    Write-Host "`nüîπ Processing cluster: $cluster_name" -ForegroundColor Cyan

    # --- Fetch Oracle PGs ---
    $pgResp = Invoke-WebRequest -Uri "$baseUrl/v2/data-protect/protection-groups" -Headers $headersPerCluster -Body @{
        environments = "kOracle"; isDeleted = "False"; isPaused = "False"; isActive = "True"
    } -Method Get
    $pgs = ($pgResp.Content | ConvertFrom-Json).protectionGroups
    if (-not $pgs) {
        Write-Host "‚ö†Ô∏è No Oracle protection groups found on $cluster_name." -ForegroundColor Yellow
        continue
    }

    # =========================================================
    # For each PG, use previous per-cluster logic exactly
    # =========================================================
    foreach ($pg in $pgs) {
        $pgId   = $pg.id
        $pgName = $pg.name
        Write-Host "`nüì¶ Checking PG: $pgName" -ForegroundColor Yellow

        $runUrl = "$baseUrl/v2/data-protect/protection-groups/$pgId/runs"
        $runBody = @{
            environments             = "kOracle"
            isDeleted                = "False"
            isPaused                 = "False"
            isActive                 = "True"
            numRuns                  = "10"
            excludeNonRestorableRuns = "False"
            includeObjectDetails     = "True"
        }

        $runResp = Invoke-WebRequest -Uri $runUrl -Headers $headersPerCluster -Body $runBody -Method Get
        $json    = $runResp | ConvertFrom-Json
        if (-not $json.runs) { continue }

        $runs = $json.runs | Sort-Object { $_.localBackupInfo[0].startTimeUsecs }
        $runTypes = $runs.localBackupInfo.runType | Select-Object -Unique

        foreach ($rType in $runTypes) {
            $latestRun = $runs | Where-Object { $_.localBackupInfo[0].runType -eq $rType } |
                Sort-Object { $_.localBackupInfo[0].endTimeUsecs } -Descending | Select-Object -First 1
            if (-not $latestRun) { continue }

            $info = $latestRun.localBackupInfo[0]
            $status = $info.status
            $runType = $info.runType
            $runStartUs = [int64]$info.startTimeUsecs
            $runEndUs   = [int64]$info.endTimeUsecs
            $startLocal = [System.TimeZoneInfo]::ConvertTimeFromUtc((Convert-ToUtcFromEpoch $runStartUs), $tz)
            $endLocal   = [System.TimeZoneInfo]::ConvertTimeFromUtc((Convert-ToUtcFromEpoch $runEndUs),   $tz)

            if ($status -eq "Succeeded" -or $status -eq "SucceededWithWarning") {
                Write-Host "‚úÖ $cluster_name ‚Üí $pgName [$rType] ‚Äì Latest run succeeded" -ForegroundColor Green
                continue
            }

            Write-Host "‚ùå $cluster_name ‚Üí $pgName [$rType] ‚Äì Latest run failed, checking details..." -ForegroundColor Red

            # --- Collect DB + Host failures ---
            $run = $latestRun
            if ($run.objects) {
                $dbObjs   = $run.objects | Where-Object { $_.object.objectType  -eq 'kDatabase' }
                $hostObjs = $run.objects | Where-Object { $_.object.environment -eq 'kPhysical' }

                # DB-level
                foreach ($db in $dbObjs) {
                    $attempts = $db.localSnapshotInfo.failedAttempts
                    if ($attempts) {
                        foreach ($fa in $attempts) {
                            $msgClean = ($fa.message -replace '[\r\n]+',' ' -replace ',',' ' -replace '"','''').Trim()
                            $parentHost = $hostObjs | Where-Object { $_.object.id -eq $db.object.sourceId } | Select-Object -First 1
                            $hostName = if ($parentHost) { $parentHost.object.name } else { "N/A" }

                            $globalFailures += [pscustomobject]@{
                                Cluster         = $cluster_name
                                ProtectionGroup = $pgName
                                RunType         = $runType
                                Hosts           = $hostName
                                DatabaseName    = $db.object.name
                                StartTime       = $startLocal
                                EndTime         = $endLocal
                                FailedMessage   = $msgClean
                            }
                        }
                    }
                }

                # Host-level
                foreach ($phy in $hostObjs) {
                    $attempts = $phy.localSnapshotInfo.failedAttempts
                    if ($attempts) {
                        foreach ($fa in $attempts) {
                            $msgClean = ($fa.message -replace '[\r\n]+',' ' -replace ',',' ' -replace '"','''').Trim()
                            $globalFailures += [pscustomobject]@{
                                Cluster         = $cluster_name
                                ProtectionGroup = $pgName
                                RunType         = $runType
                                Hosts           = $phy.object.name
                                DatabaseName    = "No DBs Discovered"
                                StartTime       = $startLocal
                                EndTime         = $endLocal
                                FailedMessage   = $msgClean
                            }
                        }
                    }
                }
            }
        }
    }
}

# =============================================================
# OUTPUT SECTION
# =============================================================
if ($globalFailures.Count -gt 0) {
    Write-Host "`nüî• Latest Failed Oracle Runs (All Clusters):`n" -ForegroundColor Cyan
    $sorted = $globalFailures | Sort-Object Cluster, ProtectionGroup, EndTime -Descending
    $sorted | Format-Table Cluster, ProtectionGroup, RunType, Hosts, DatabaseName, StartTime, EndTime, FailedMessage -AutoSize
} else {
    Write-Host "`n‚úÖ All latest Oracle runs succeeded across all clusters." -ForegroundColor Green
}

# CSV reference (no export for now)
$timestamp = Get-Date -Format "yyyyMMdd_HHmm"
$csvPath = "X:\PowerShell\Data\Choesity\BackupFailures\BackupFailures_Oracle_AllClusters_$timestamp.csv"
Write-Host "`nüìÇ (CSV path ready if needed later): $csvPath" -ForegroundColor Gray
