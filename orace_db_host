# -------------------------------------------------------------
# Cohesity Oracle Failures ‚Äì Multi-Cluster (Helios)
# Strictly READ-ONLY (GET-only)
# Adds Host‚ÄìDB mapping from $run.objects
# Safe timestamp conversion
# -------------------------------------------------------------

$logDirectory = "X:\PowerShell\Data\Cohesity\BackupFailures"

# Ensure folder exists and clean up if more than 50 files
if (-not (Test-Path -Path $logDirectory -PathType Container)) {
    New-Item -Path $logDirectory -ItemType Directory | Out-Null
}

$fileCount = (Get-ChildItem -Path $logDirectory -File).Count
if ($fileCount -gt 50) {
    $filesToDelete = Get-ChildItem -Path $logDirectory -File |
        Sort-Object CreationTime | Select-Object -First ($fileCount - 50)
    $filesToDelete | Remove-Item -Force
    Write-Host "$($filesToDelete.Count) old log files deleted."
}

# -------------------------------------------------------------
# 0Ô∏è‚É£ API key from your path
# -------------------------------------------------------------
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found at $apikeypath" }
$apiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $apiKey }

# -------------------------------------------------------------
# 1Ô∏è‚É£ Get Clusters (ClusterName + ClusterId)
# -------------------------------------------------------------
$url = "https://helios.cohesity.com/v2/mcm/cluster-mgmt/info"
$response = Invoke-WebRequest -Method Get -Uri $url -Headers $commonHeaders
$json_clu = $response.Content | ConvertFrom-Json
$json_clu = $json_clu.cohesityClusters

if (-not $json_clu) { throw "No clusters returned from Helios." }

# -------------------------------------------------------------
# 2Ô∏è‚É£ Helper + Setup
# -------------------------------------------------------------
function Convert-ToLocalFromEpoch($v, $tz) {
    if (-not $v -or $v -eq 0) { return $null }
    try {
        $utc = [DateTimeOffset]::FromUnixTimeMilliseconds([int64]($v / 1000)).UtcDateTime
        if ($tz) {
            return [System.TimeZoneInfo]::ConvertTimeFromUtc($utc, $tz)
        } else {
            return $utc.ToLocalTime()
        }
    } catch {
        return $null
    }
}

$tz = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
$baseUrl = "https://helios.cohesity.com"
$globalFailures = @()

# -------------------------------------------------------------
# 3Ô∏è‚É£ Iterate through each cluster
# -------------------------------------------------------------
foreach ($cluster in $json_clu) {
    $cluster_name = $cluster.name
    $cluster_id   = $cluster.clusterId
    Write-Host "`nüîπ Processing cluster: $cluster_name" -ForegroundColor Cyan

    $headers = @{ apiKey = $apiKey; accessClusterId = $cluster_id }

    # --- Fetch Oracle PGs ---
    $pgResp = Invoke-WebRequest -Uri "$baseUrl/v2/data-protect/protection-groups" -Headers $headers -Body @{
        environments = "kOracle"; isDeleted = "False"; isPaused = "False"; isActive = "True"
    } -Method Get
    $pgs = ($pgResp.Content | ConvertFrom-Json).protectionGroups
    if (-not $pgs) {
        Write-Host "‚ö†Ô∏è No Oracle protection groups found on $cluster_name." -ForegroundColor Yellow
        continue
    }

    foreach ($pg in $pgs) {
        $pgId   = $pg.id
        $pgName = $pg.name
        Write-Host "`nüì¶ Checking PG: $pgName" -ForegroundColor Yellow

        $runUrl = "$baseUrl/v2/data-protect/protection-groups/$pgId/runs"
        $runBody = @{
            environments             = "kOracle"
            isDeleted                = "False"
            isPaused                 = "False"
            isActive                 = "True"
            numRuns                  = "10"
            excludeNonRestorableRuns = "False"
            includeObjectDetails     = "True"
        }

        $runResp = Invoke-WebRequest -Uri $runUrl -Headers $headers -Body $runBody -Method Get
        $jsonRuns = $runResp | ConvertFrom-Json
        if (-not $jsonRuns.runs) { continue }

        $runs = $jsonRuns.runs | Sort-Object { $_.localBackupInfo[0].startTimeUsecs }
        $runTypes = $runs.localBackupInfo.runType | Select-Object -Unique

        foreach ($rType in $runTypes) {
            $latestRun = $runs | Where-Object { $_.localBackupInfo[0].runType -eq $rType } |
                Sort-Object { $_.localBackupInfo[0].endTimeUsecs } -Descending | Select-Object -First 1
            if (-not $latestRun) { continue }

            $info = $latestRun.localBackupInfo[0]
            $status = $info.status
            $runType = $info.runType
            $runStartUs = [int64]$info.startTimeUsecs
            $runEndUs   = [int64]$info.endTimeUsecs
            $startLocal = Convert-ToLocalFromEpoch $runStartUs $tz
            $endLocal   = Convert-ToLocalFromEpoch $runEndUs   $tz

            if ($status -eq "Succeeded" -or $status -eq "SucceededWithWarning") {
                Write-Host "‚úÖ $cluster_name ‚Üí $pgName [$rType] ‚Äì Latest run succeeded" -ForegroundColor Green
                continue
            }

            Write-Host "‚ùå $cluster_name ‚Üí $pgName [$rType] ‚Äì Latest run failed, collecting details..." -ForegroundColor Red

            if ($latestRun.objects) {
                $dbObjs   = $latestRun.objects | Where-Object { $_.object.objectType  -eq 'kDatabase' }
                $hostObjs = $latestRun.objects | Where-Object { $_.object.environment -eq 'kPhysical' }

                # --- DB-level failures ---
                foreach ($db in $dbObjs) {
                    $attempts = $db.localSnapshotInfo.failedAttempts
                    if ($attempts) {
                        foreach ($fa in $attempts) {
                            $msgClean = ($fa.message -replace '[\r\n]+',' ' -replace ',',' ' -replace '"','''').Trim()
                            $parentHost = $hostObjs | Where-Object { $_.object.id -eq $db.object.sourceId } | Select-Object -First 1
                            $hostName = if ($parentHost) { $parentHost.object.name } else { "N/A" }

                            $globalFailures += [pscustomobject]@{
                                Cluster         = $cluster_name
                                ProtectionGroup = $pgName
                                RunType         = $runType
                                Hosts           = $hostName
                                DatabaseName    = $db.object.name
                                StartTime       = $startLocal
                                EndTime         = $endLocal
                                FailedMessage   = $msgClean
                            }
                        }
                    }
                }

                # --- Host-level failures ---
                foreach ($phy in $hostObjs) {
                    $attempts = $phy.localSnapshotInfo.failedAttempts
                    if ($attempts) {
                        foreach ($fa in $attempts) {
                            $msgClean = ($fa.message -replace '[\r\n]+',' ' -replace ',',' ' -replace '"','''').Trim()
                            $globalFailures += [pscustomobject]@{
                                Cluster         = $cluster_name
                                ProtectionGroup = $pgName
                                RunType         = $runType
                                Hosts           = $phy.object.name
                                DatabaseName    = "No DBs Discovered"
                                StartTime       = $startLocal
                                EndTime         = $endLocal
                                FailedMessage   = $msgClean
                            }
                        }
                    }
                }
            }
        }
    }
}

# -------------------------------------------------------------
# 4Ô∏è‚É£ Output Section
# -------------------------------------------------------------
if ($globalFailures.Count -gt 0) {
    Write-Host "`nüî• Latest Failed Oracle Runs (All Clusters):`n" -ForegroundColor Cyan
    $sorted = $globalFailures | Sort-Object Cluster, ProtectionGroup, EndTime -Descending
    $sorted | Format-Table Cluster, ProtectionGroup, RunType, Hosts, DatabaseName, StartTime, EndTime, FailedMessage -AutoSize
} else {
    Write-Host "`n‚úÖ All latest Oracle runs succeeded across all clusters." -ForegroundColor Green
}

# CSV reference path (no export yet)
$timestamp = Get-Date -Format "yyyyMMdd_HHmm"
$csvPath = "X:\PowerShell\Data\Cohesity\BackupFailures\BackupFailures_Oracle_AllClusters_$timestamp.csv"
Write-Host "`nüìÇ (CSV path ready if needed later): $csvPath" -ForegroundColor Gray
