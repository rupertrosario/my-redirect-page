export default async function () {
  let apiKey;
  try {
    apiKey = credentials?.cohesity_helios_api_key?.token || "PASTE_YOUR_API_KEY_HERE";
  } catch {
    apiKey = "PASTE_YOUR_API_KEY_HERE";
  }

  const baseUrl = "https://helios.cohesity.com";
  const h = { accept: "application/json", apiKey };
  const oneTiB = 1099511627776;
  const rows = [];

  const clusters = (await (await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers: h })).json()).cohesityClusters || [];
  for (const c of clusters) {
    const hdr = { ...h, accessClusterId: String(c.clusterId) };
    const s = await (await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: hdr })).json();
    rows.push({
      clusterName: c.clusterName,
      usedTiB: +(s.localUsageBytes / oneTiB).toFixed(2),
      availTiB: +(s.localAvailableBytes / oneTiB).toFixed(2),
      totalTiB: +(s.totalCapacityBytes / oneTiB).toFixed(2),
      consumed: +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2)
    });
  }

  // ---- Format as plain text table ----
  const pad = (t, n) => String(t ?? "").padEnd(n);
  const header =
    pad("Cluster", 22) +
    pad("Used(TiB)", 12) +
    pad("Avail(TiB)", 12) +
    pad("Total(TiB)", 12) +
    pad("Consumed(%)", 12);
  const sep = "-".repeat(header.length);

  let output = "Cohesity Helios â€“ Capacity Summary\n\n" + header + "\n" + sep + "\n";
  for (const r of rows) {
    output +=
      pad(r.clusterName, 22) +
      pad(r.usedTiB, 12) +
      pad(r.availTiB, 12) +
      pad(r.totalTiB, 12) +
      pad(r.consumed, 12) +
      "\n";
  }

  return { output };

{{ steps.run_javascript_1.output.output }}

}
