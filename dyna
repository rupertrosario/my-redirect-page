export default async function () {
  // üîê use vault if available, else manual key
  let apiKey;
  try {
    apiKey = credentials?.cohesity_helios_api_key?.token || "PASTE_YOUR_API_KEY_HERE";
  } catch {
    apiKey = "PASTE_YOUR_API_KEY_HERE";
  }

  const baseUrl = "https://helios.cohesity.com";
  const h = { accept: "application/json", apiKey };
  const oneTiB = 1099511627776;
  const out = [];

  const clusters = (await (await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers: h })).json()).cohesityClusters || [];
  for (const c of clusters) {
    const hdr = { ...h, accessClusterId: String(c.clusterId) };
    const s = await (await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: hdr })).json();
    out.push({
      clusterName: c.clusterName,
      usedTiB: +(s.localUsageBytes / oneTiB).toFixed(2),
      availTiB: +(s.localAvailableBytes / oneTiB).toFixed(2),
      totalTiB: +(s.totalCapacityBytes / oneTiB).toFixed(2),
      consumed: +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2)
    });
  }
  return { clusters: out };
}


<h3>Cohesity Helios Capacity Summary</h3>

<table border="1" cellspacing="0" cellpadding="4" style="border-collapse:collapse;font-family:Arial;font-size:13px;">
  <tr style="background:#f3f3f3;">
    <th>Cluster</th>
    <th>Used (TiB)</th>
    <th>Avail (TiB)</th>
    <th>Total (TiB)</th>
    <th>Consumed (%)</th>
  </tr>
  {{#each steps.run_javascript_1.output.clusters}}
  <tr>
    <td>{{clusterName}}</td>
    <td align="right">{{usedTiB}}</td>
    <td align="right">{{availTiB}}</td>
    <td align="right">{{totalTiB}}</td>
    <td align="right">{{consumed}}</td>
  </tr>
  {{/each}}
</table>

<p style="font-size:12px;color:#888;">Generated automatically by Dynatrace Workflow.</p>

