import React, { useEffect, useState } from "react";
import { Card } from "@dynatrace-sdk/ui-card";
import { Table } from "@dynatrace-sdk/ui-table";
import { Spinner } from "@dynatrace-sdk/ui-spinner";

export default function CohesityHeliosTile() {
  const [rows, setRows] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // --- Config ---
  const apiKey  = "PASTE_YOUR_API_KEY_HERE";  // ⚠️ temp only
  const baseUrl = "https://helios.cohesity.com";
  const oneTiB  = 1099511627776;
  const headers = { accept: "application/json", apiKey };

  useEffect(() => {
    async function run() {
      try {
        // 1️⃣ Cluster inventory
        const listUrl = `${baseUrl}/v2/mcm/cluster-mgmt/info`;
        const listResp = await fetch(listUrl, { method: "GET", headers });
        if (!listResp.ok) throw new Error(`Cluster list HTTP ${listResp.status}`);
        const data = await listResp.json();
        const clusters = data?.cohesityClusters || [];

        if (clusters.length === 0) {
          setError("⚠️ No clusters returned.");
          setLoading(false);
          return;
        }

        const results = [];

        // 2️⃣ Loop through clusters
        for (const { clusterName, clusterId } of clusters) {
          const h = { ...headers, accessClusterId: String(clusterId) };
          const safeName = clusterName.replace(/\s+/g, "");
          const entityId = `${safeName}+(ID+${clusterId})`;

          // --- Garbage metric
          let garbageGB = 0, garbageTB = 0;
          try {
            const tsUrl =
              `${baseUrl}/irisservices/api/v1/public/statistics/timeSeriesStats` +
              `?schemaName=ApolloV2ClusterStats&metricName=EstimatedGarbageBytes` +
              `&startTimeMsecs=2&entityId=${entityId}` +
              `&rollupFunction=latest&rollupIntervalSecs=30&metricUnitType=0&range=day`;
            const tsResp = await fetch(tsUrl, { method: "GET", headers: h });
            if (tsResp.ok) {
              const tsJson = await tsResp.json();
              const latest = Array.isArray(tsJson?.dataPointVec)
                ? tsJson.dataPointVec.at(-1)
                : undefined;
              const bytes = latest?.data?.int64Value ?? 0;
              garbageGB = +(bytes / (1024 ** 3)).toFixed(2);
              garbageTB = +(bytes / (1024 ** 4)).toFixed(3);
            }
          } catch (e) {
            console.warn(`Garbage metric failed for ${clusterName}: ${e.message}`);
          }

          // --- Capacity metric
          try {
            const capUrl = `${baseUrl}/irisservices/api/v1/public/stats/storage`;
            const capResp = await fetch(capUrl, { method: "GET", headers: h });
            if (!capResp.ok) throw new Error(`Capacity HTTP ${capResp.status}`);
            const s = await capResp.json();
            const totalTiB = +(s.totalCapacityBytes / oneTiB).toFixed(2);
            const usedTiB  = +(s.localUsageBytes / oneTiB).toFixed(2);
            const availTiB = +(s.localAvailableBytes / oneTiB).toFixed(2);
            const consumed = +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2);

            results.push({
              clusterName,
              totalTiB,
              usedTiB,
              availTiB,
              consumedPercent: consumed,
              garbageGB,
              garbageTB
            });
          } catch (e) {
            console.warn(`Capacity metric failed for ${clusterName}: ${e.message}`);
          }
        }

        setRows(results);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    }

    run();
  }, []);

  if (loading) return <Spinner label="Fetching Cohesity Helios data..." />;
  if (error) return <Card title="Cohesity Helios" subtitle={error} />;

  return (
    <Card title="Cohesity Helios – Cluster Capacity Summary">
      <Table
        columns={[
          { header: "Cluster", accessor: "clusterName" },
          { header: "Used (TiB)", accessor: "usedTiB" },
          { header: "Available (TiB)", accessor: "availTiB" },
          { header: "Total (TiB)", accessor: "totalTiB" },
          { header: "Consumed (%)", accessor: "consumedPercent" },
          { header: "Garbage (GB)", accessor: "garbageGB" },
        ]}
        data={rows}
      />
    </Card>
  );
}
