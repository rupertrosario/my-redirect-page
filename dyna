export default async function (uiBuilder) {
  const apiKey  = "PASTE_YOUR_API_KEY_HERE";   // temporary
  const baseUrl = "https://helios.cohesity.com";
  const oneTiB  = 1099511627776;
  const headers = { accept: "application/json", apiKey };
  const rows = [];

  try {
    const listResp = await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers });
    if (!listResp.ok) throw new Error(`Cluster list HTTP ${listResp.status}`);
    const listJson = await listResp.json();
    const clusters = listJson?.cohesityClusters || [];

    for (const { clusterName, clusterId } of clusters) {
      const h = { ...headers, accessClusterId: String(clusterId) };
      const capResp = await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: h });
      if (!capResp.ok) continue;
      const s = await capResp.json();

      const totalTiB = +(s.totalCapacityBytes / oneTiB).toFixed(2);
      const usedTiB  = +(s.localUsageBytes / oneTiB).toFixed(2);
      const availTiB = +(s.localAvailableBytes / oneTiB).toFixed(2);
      const consumed = +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2);

      rows.push({
        Cluster: clusterName,
        "Used (TiB)": usedTiB,
        "Available (TiB)": availTiB,
        "Total (TiB)": totalTiB,
        "Consumed (%)": consumed
      });
    }
  } catch (err) {
    rows.push({ Cluster: "❌ Error", "Used (TiB)": err.message });
  }

  // ✅ Render simple table
  uiBuilder.table(rows);
}
