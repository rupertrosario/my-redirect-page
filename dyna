/**
 * Dynatrace Workflow: Simple GET test to Cohesity cluster using API key
 * No POST /accessTokens required.
 */

const apiKey = Deno.env.get("COHESITY_API_KEY");
const clusterId = Deno.env.get("COHESITY_CLUSTERID"); // optional if single cluster
const heliosUrl = "https://helios.cohesity.com";

if (!apiKey) throw new Error("‚ö†Ô∏è Missing COHESITY_API_KEY.");

console.log(`üîπ Testing GET call to Cohesity API${clusterId ? " (clusterId=" + clusterId + ")" : ""}...`);

const headers = { "apiKey": apiKey };
if (clusterId) headers["accessClusterId"] = clusterId;

try {
  const resp = await fetch(`${heliosUrl}/irisservices/api/v1/public/stats/storage`, {
    method: "GET",
    headers: headers
  });

  if (!resp.ok) throw new Error(`‚ùå GET failed: ${resp.status} ${resp.statusText}`);

  const stats = await resp.json();

  const totalTiB = (stats.totalCapacityBytes / (1024 ** 4)).toFixed(2);
  const usedTiB  = (stats.localUsageBytes / (1024 ** 4)).toFixed(2);
  const freeTiB  = (stats.localAvailableBytes / (1024 ** 4)).toFixed(2);
  const usedPct  = ((stats.localUsageBytes / stats.totalCapacityBytes) * 100).toFixed(1);

  console.log(`‚úÖ GET succeeded`);
  console.log(`Total: ${totalTiB} TiB | Used: ${usedTiB} TiB | Free: ${freeTiB} TiB | Used%: ${usedPct}%`);

  globalThis.outputs = { usedPct: usedPct };
} catch (err) {
  console.error("‚ùå Error:", err.message);
  throw err;
}
