/**
 * Dynatrace Workflow ‚Äì Cohesity Helios Capacity & Garbage Report
 * --------------------------------------------------------------
 * ‚úÖ READ-ONLY (GET-only) ‚Äî No writes or deletes
 * ‚úÖ Uses secure credential vault entry: cohesity-helios-api-key
 * ‚úÖ Returns tabular JSON ready for Workflow visualization
 */

export default async function () {
  // üîê Read your API key securely from the Workflow credential input
  const apiKey = credentials["cohesity-helios-api-key"].token;

  // üåê Base settings
  const baseUrl = "https://helios.cohesity.com";
  const oneTiB  = 1099511627776;
  const headers = { accept: "application/json", apiKey };

  // 1Ô∏è‚É£ Get list of clusters
  const listUrl = `${baseUrl}/v2/mcm/cluster-mgmt/info`;
  const listResp = await fetch(listUrl, { method: "GET", headers });

  if (listResp.status !== 200)
    throw new Error(`‚ùå Cluster list failed (HTTP ${listResp.status})`);

  const listJson = await listResp.json();
  const clusters = listJson?.cohesityClusters || [];
  if (clusters.length === 0) return { clusters: [] };

  const results = [];

  // 2Ô∏è‚É£ For each cluster ‚Üí collect garbage + capacity
  for (const { clusterName, clusterId } of clusters) {
    const h = { ...headers, accessClusterId: String(clusterId) };
    const safeName = clusterName.replace(/\s+/g, "");
    const entityId = `${safeName}+(ID+${clusterId})`;

    // --- Garbage metric ---
    const tsUrl =
      `${baseUrl}/irisservices/api/v1/public/statistics/timeSeriesStats` +
      `?schemaName=ApolloV2ClusterStats` +
      `&metricName=EstimatedGarbageBytes` +
      `&startTimeMsecs=2` +
      `&entityId=${entityId}` +
      `&rollupFunction=latest` +
      `&rollupIntervalSecs=30` +
      `&metricUnitType=0` +
      `&range=day`;

    const tsResp = await fetch(tsUrl, { method: "GET", headers: h });
    const tsJson = tsResp.status === 200 ? await tsResp.json() : {};
    const latest = Array.isArray(tsJson?.dataPointVec)
      ? tsJson.dataPointVec.at(-1)
      : undefined;
    const garbageBytes = latest?.data?.int64Value ?? 0;
    const garbageGB = +(garbageBytes / (1024 ** 3)).toFixed(2);
    const garbageTB = +(garbageBytes / (1024 ** 4)).toFixed(3);

    // --- Capacity metric ---
    const capUrl = `${baseUrl}/irisservices/api/v1/public/stats/storage`;
    const capResp = await fetch(capUrl, { method: "GET", headers: h });
    if (capResp.status !== 200) continue;

    const s = await capResp.json();
    const totalTiB = +(s.totalCapacityBytes / oneTiB).toFixed(2);
    const usedTiB  = +(s.localUsageBytes / oneTiB).toFixed(2);
    const availTiB = +(s.localAvailableBytes / oneTiB).toFixed(2);
    const consumed = +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2);

    results.push({
      clusterName,
      totalTiB,
      usedTiB,
      availTiB,
      consumedPercent: consumed,
      garbageGB,
      garbageTB,
    });
  }

  // 3Ô∏è‚É£ Return final structured output ‚Üí auto-rendered as table in Workflow
  return { clusters: results };
}


export default async function () {
  console.log("Credential object:", credentials);
  return { token: credentials["cohesity-helios-api-key"]?.token || "not found" };
}
