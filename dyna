import React, { useEffect, useState } from "react";
import { Table } from "@dynatrace-sdk/ui-table";

export default function CohesityHeliosSimple() {
  const [rows, setRows] = useState([]);
  const apiKey = "PASTE_YOUR_API_KEY_HERE";      // temporary key
  const baseUrl = "https://helios.cohesity.com";
  const oneTiB = 1099511627776;
  const headers = { accept: "application/json", apiKey };

  useEffect(() => {
    async function load() {
      try {
        const listResp = await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers });
        if (!listResp.ok) throw new Error(`Cluster list HTTP ${listResp.status}`);
        const listJson = await listResp.json();
        const clusters = listJson?.cohesityClusters || [];
        const results = [];

        for (const { clusterName, clusterId } of clusters) {
          const h = { ...headers, accessClusterId: String(clusterId) };
          const capResp = await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: h });
          if (!capResp.ok) continue;
          const s = await capResp.json();

          const totalTiB = +(s.totalCapacityBytes / oneTiB).toFixed(2);
          const usedTiB  = +(s.localUsageBytes / oneTiB).toFixed(2);
          const availTiB = +(s.localAvailableBytes / oneTiB).toFixed(2);
          const consumed = +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2);

          results.push({ clusterName, usedTiB, availTiB, totalTiB, consumedPercent: consumed });
        }
        setRows(results);
      } catch (err) {
        setRows([{ clusterName: "‚ùå Error", usedTiB: err.message }]);
      }
    }
    load();
  }, []);

  return <Table columns={[{ header: "Cluster", accessor: "clusterName" }, { header: "Used (TiB)", accessor: "usedTiB" }, { header: "Available (TiB)", accessor: "availTiB" }, { header: "Total (TiB)", accessor: "totalTiB" }, { header: "Consumed (%)", accessor: "consumedPercent" }]} data={rows} />;
}
