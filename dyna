export default async function () {
  // üîê Use vault credential if available, else fallback to manual key
  let apiKey;
  try {
    apiKey = credentials?.cohesity_helios_api_key?.token || "PASTE_YOUR_API_KEY_HERE";
  } catch {
    apiKey = "PASTE_YOUR_API_KEY_HERE";
  }

  const baseUrl = "https://helios.cohesity.com";
  const h = { accept: "application/json", apiKey };
  const oneTiB = 1099511627776;
  const results = [];

  // --- Get cluster list ---
  const listResp = await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers: h });
  if (!listResp.ok) throw new Error(`Cluster list failed: HTTP ${listResp.status}`);
  const listJson = await listResp.json();
  const clusters = listJson?.cohesityClusters || [];

  // --- For each cluster, get capacity stats ---
  for (const { clusterName, clusterId } of clusters) {
    const hdr = { ...h, accessClusterId: String(clusterId) };
    const capResp = await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: hdr });
    if (!capResp.ok) continue;
    const s = await capResp.json();

    results.push({
      clusterName,
      totalTiB: +(s.totalCapacityBytes / oneTiB).toFixed(2),
      usedTiB:  +(s.localUsageBytes / oneTiB).toFixed(2),
      availTiB: +(s.localAvailableBytes / oneTiB).toFixed(2),
      consumedPercent: +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2)
    });
  }

  // --- Return structured JSON ---
  return { clusters: results };
}
