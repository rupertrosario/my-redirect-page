/**
 * Dynatrace Workflow: Test Connection to ONE Cohesity Cluster via Helios
 * Prompts for credentials and cluster ID interactively.
 */

const username = Deno.env.get("COHESITY_USER");
const password = Deno.env.get("COHESITY_PASS");
const heliosUrl = "https://helios.cohesity.com";
const clusterId = Deno.env.get("COHESITY_CLUSTERID"); // Ask this at runtime
const domain = "local"; // change if AD

if (!username || !password || !clusterId) {
  throw new Error("‚ö†Ô∏è Please provide username, password, and cluster ID as workflow inputs.");
}

console.log(`üîπ Connecting to Helios as ${username} (ClusterID: ${clusterId})...`);

try {
  // ---- Step 1: Login to Helios ----
  const loginResponse = await fetch(`${heliosUrl}/irisservices/api/v1/public/accessTokens`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      domain: domain,
      username: username,
      password: password
    }),
  });

  if (!loginResponse.ok) {
    throw new Error(`‚ùå Login failed: ${loginResponse.status} ${loginResponse.statusText}`);
  }

  const loginJson = await loginResponse.json();
  const token = loginJson.accessToken;
  console.log("‚úÖ Authentication successful!");

  // ---- Step 2: Fetch storage stats for that cluster ----
  const statsResponse = await fetch(`${heliosUrl}/irisservices/api/v1/public/stats/storage`, {
    method: "GET",
    headers: {
      "Authorization": `Bearer ${token}`,
      "accessClusterId": clusterId
    },
  });

  if (!statsResponse.ok) {
    throw new Error(`‚ùå Failed to fetch stats: ${statsResponse.statusText}`);
  }

  const stats = await statsResponse.json();

  const totalTiB = (stats.totalCapacityBytes / (1024 ** 4)).toFixed(2);
  const usedTiB = (stats.localUsageBytes / (1024 ** 4)).toFixed(2);
  const freeTiB = (stats.localAvailableBytes / (1024 ** 4)).toFixed(2);
  const usedPct = ((stats.localUsageBytes / stats.totalCapacityBytes) * 100).toFixed(1);

  console.log(`‚úÖ Cluster ID ${clusterId} Stats:`);
  console.log(`Total: ${totalTiB} TiB | Used: ${usedTiB} TiB | Free: ${freeTiB} TiB | Used%: ${usedPct}`);

  return { status: "Success", usedPct: usedPct, totalTiB, usedTiB, freeTiB };

} catch (err) {
  console.error("‚ùå Error:", err.message);
  throw err;
}
