export default async function () {
  // üîê use vault if available, else manual key
  let apiKey;
  try {
    apiKey = credentials?.cohesity_helios_api_key?.token || "PASTE_YOUR_API_KEY_HERE";
  } catch {
    apiKey = "PASTE_YOUR_API_KEY_HERE";
  }

  const baseUrl = "https://helios.cohesity.com";
  const h = { accept: "application/json", apiKey };
  const oneTiB = 1099511627776;
  const out = [];

  const clusters = (await (await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers: h })).json()).cohesityClusters || [];
  for (const c of clusters) {
    const hdr = { ...h, accessClusterId: String(c.clusterId) };
    const s = await (await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: hdr })).json();
    out.push({
      clusterName: c.clusterName,
      usedTiB: +(s.localUsageBytes / oneTiB).toFixed(2),
      availTiB: +(s.localAvailableBytes / oneTiB).toFixed(2),
      totalTiB: +(s.totalCapacityBytes / oneTiB).toFixed(2),
      consumed: +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2)
    });
  }
  return { clusters: out };
}


Cohesity Helios ‚Äì Capacity Summary

Cluster                Used(TiB)   Avail(TiB)  Total(TiB)  Consumed(%)
---------------------------------------------------------------------
{{#each steps.run_javascript_1.output.clusters}}
{{clusterName}}        {{usedTiB}}       {{availTiB}}       {{totalTiB}}       {{consumed}}
{{/each}}

Generated automatically by Dynatrace Workflow (read-only Cohesity API).
