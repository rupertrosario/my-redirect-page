export default async function () {
  console.log("🚀 Cohesity Helios – Strict READ-ONLY (GET-only, no write/delete/post)");

  // 🔐 OPTION 1: Secure – from Dynatrace Credential Vault
  // Make sure your vault entry name is "Cohesity_API_Key"
  let apiKey;
  try {
    apiKey = credentials?.Cohesity_API_Key?.token;
  } catch {
    apiKey = null;
  }

  // 🧩 OPTION 2: Manual fallback – paste directly if vault not configured
  if (!apiKey || apiKey === "PASTE_YOUR_API_KEY_HERE") {
    apiKey = "PASTE_YOUR_API_KEY_HERE"; // <-- Replace only for testing
    console.warn("⚠️ Using hard-coded API key (not from vault) – for testing only!");
  } else {
    console.log("✅ Using secure API key from Dynatrace Credential Vault");
  }

  const baseUrl = "https://helios.cohesity.com";
  const oneTiB  = 1099511627776;
  const headers = { accept: "application/json", apiKey };

  // 1️⃣ Get cluster inventory
  const listUrl = `${baseUrl}/v2/mcm/cluster-mgmt/info`;
  const listResp = await fetch(listUrl, { method: "GET", headers });
  if (listResp.status !== 200) throw new Error(`❌ Cluster list failed (HTTP ${listResp.status})`);

  const data = await listResp.json();
  const clusters = data?.cohesityClusters || [];

  if (clusters.length === 0) {
    console.log("⚠️ No clusters returned.");
    return { clusters: [] };
  }

  const results = [];

  // 2️⃣ For each cluster, read-only GETs for garbage + capacity
  for (const { clusterName, clusterId } of clusters) {
    const h = { ...headers, accessClusterId: String(clusterId) };
    console.log(`📊 Reading ${clusterName} (ID ${clusterId})`);

    const safeName = clusterName.replace(/\s+/g, '');
    const entityId = `${safeName}+(ID+${clusterId})`;

    const tsUrl =
      `${baseUrl}/irisservices/api/v1/public/statistics/timeSeriesStats` +
      `?schemaName=ApolloV2ClusterStats` +
      `&metricName=EstimatedGarbageBytes` +
      `&startTimeMsecs=2` +
      `&entityId=${entityId}` +
      `&rollupFunction=latest` +
      `&rollupIntervalSecs=30` +
      `&metricUnitType=0` +
      `&range=day`;

    console.log(`🔗 GET → ${tsUrl}`);

    const tsResp = await fetch(tsUrl, { method: "GET", headers: h });
    if (tsResp.status !== 200) {
      console.log(`⚠️ Garbage stats GET failed for ${clusterName} (HTTP ${tsResp.status})`);
      continue;
    }

    const tsJson = await tsResp.json();
    const latest = Array.isArray(tsJson?.dataPointVec)
      ? tsJson.dataPointVec[tsJson.dataPointVec.length - 1]
      : undefined;
    const garbageBytes = latest?.data?.int64Value ?? 0;
    const garbageGB = +(garbageBytes / (1024 ** 3)).toFixed(2);
    const garbageTB = +(garbageBytes / (1024 ** 4)).toFixed(3);

    const capUrl = `${baseUrl}/irisservices/api/v1/public/stats/storage`;
    const capResp = await fetch(capUrl, { method: "GET", headers: h });
    if (capResp.status !== 200) {
      console.log(`⚠️ Capacity stats GET failed for ${clusterName} (HTTP ${capResp.status})`);
      continue;
    }

    const s = await capResp.json();
    const totalTiB = +(s.totalCapacityBytes / oneTiB).toFixed(2);
    const usedTiB  = +(s.localUsageBytes / oneTiB).toFixed(2);
    const availTiB = +(s.localAvailableBytes / oneTiB).toFixed(2);
    const consumed = +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2);

    results.push({
      clusterName,
      clusterId,
      totalTiB,
      usedTiB,
      availTiB,
      consumedPercent: consumed,
      garbageGB,
      garbageTB
    });

    console.log(`✅ ${clusterName}: ${consumed}% used (${usedTiB}/${totalTiB} TiB) | Garbage ${garbageGB} GB (${garbageTB} TB)`);
  }

  console.log("📄 Final summary (read-only):");
  console.log(JSON.stringify(results, null, 2));

  return { clusters: results };
}
