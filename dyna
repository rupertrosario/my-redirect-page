/**
 * Dynatrace Workflow: Cohesity Capacity API
 * Author: Rupert Rosario
 * Description: Fetches cluster capacity stats (Total, Used, Available) from Cohesity via Helios API.
 */

const apiKey = Deno.env.get("COHESITY_API_KEY"); // Add via Secure Variables in Workflow
const heliosUrl = "https://helios.cohesity.com";
const clusterEndpoint = `${heliosUrl}/v2/mcm/cluster-mgmt/info`;
const statsEndpoint = `${heliosUrl}/irisservices/api/v1/public/stats/storage`;

// ---- Fetch all clusters ----
const clustersResponse = await fetch(clusterEndpoint, {
  method: "GET",
  headers: { "apiKey": apiKey },
});

if (!clustersResponse.ok) {
  throw new Error(`Failed to fetch clusters: ${clustersResponse.statusText}`);
}

const clusterData = await clustersResponse.json();
const clusters = clusterData.cohesityClusters;

// ---- Loop through clusters ----
for (const cluster of clusters) {
  const clusterId = cluster.clusterId;
  const clusterName = cluster.clusterName;

  const statsResponse = await fetch(statsEndpoint, {
    method: "GET",
    headers: {
      "apiKey": apiKey,
      "accessClusterId": clusterId
    }
  });

  if (!statsResponse.ok) {
    console.error(`❌ Failed for ${clusterName}`);
    continue;
  }

  const stats = await statsResponse.json();

  const totalTiB = (stats.totalCapacityBytes / (1024 ** 4)).toFixed(1);
  const usedTiB = (stats.localUsageBytes / (1024 ** 4)).toFixed(1);
  const freeTiB = (stats.localAvailableBytes / (1024 ** 4)).toFixed(1);
  const consumedPct = ((stats.localUsageBytes / stats.totalCapacityBytes) * 100).toFixed(1);

  console.log(`✅ ${clusterName}`);
  console.log(`Total: ${totalTiB} TiB | Used: ${usedTiB} TiB | Free: ${freeTiB} TiB | Used %: ${consumedPct}%`);
}
