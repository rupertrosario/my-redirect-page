# =====================================================================
#  Cohesity Consecutive Failure Report (Backup + Log Backup)
#  Auth: Helios API key only (no username/password)
#  Mode: Read-only, supports single or all clusters
# =====================================================================

Set-StrictMode -Version Latest

[CmdletBinding()]
param (
    [Parameter()][string]$vip = 'helios.cohesity.com',
    [Parameter()][switch]$mcm,                       # Helios (MCM) mode
    [Parameter()][string]$clusterName = $null,       # one cluster
    [Parameter()][switch]$allClusters,               # all clusters
    [Parameter()][int]$numRuns = 100,
    [Parameter()][int]$days = 35,
    [Parameter()][int]$failureCount = 3,
    [Parameter()][string]$apiKeyPath = 'X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt',
    [Parameter()][string]$smtpServer,
    [Parameter()][string]$smtpPort = '25',
    [Parameter()][array]$sendTo,
    [Parameter()][string]$sendFrom
)

# ---- helper
. $(Join-Path -Path $PSScriptRoot -ChildPath cohesity-api.ps1)

# ---- read API key
if (!(Test-Path $apiKeyPath)) { throw "API key file not found at $apiKeyPath" }
$ApiKey = (Get-Content -Path $apiKeyPath -Raw).Trim()
if ([string]::IsNullOrWhiteSpace($ApiKey)) { throw "API key file is empty at $apiKeyPath" }

$useApiKey = $true
$noPrompt  = $true
$password  = $ApiKey
$commonHeaders = @{ apiKey = $ApiKey }

# ---- authenticate
apiauth -vip $vip -username 'helios' -domain 'local' -passwd $password `
    -apiKeyAuthentication:$useApiKey -heliosAuthentication:$mcm -noPromptForPassword:$noPrompt

if(!$cohesity_api.authorized){
    Write-Host "Authentication failed. Check your API key or network access." -ForegroundColor Red
    exit 1
}

# =====================================================================
#  Function: Core logic for one cluster
# =====================================================================
function Run-ConsecutiveFailureReport {
    param([string]$ClusterName)

    Write-Host "`nProcessing cluster: $ClusterName" -ForegroundColor Cyan
    $null = heliosCluster $ClusterName

    $cluster  = api get cluster
    $outStamp = (Get-Date).ToString('yyyy-MM-dd_HHmmss')
    $outfile  = "consecutiveFailureReport-$($cluster.name)-$outStamp.csv"
    $startUsecs = timeAgo $days 'days'

    $rootNodes = api get "protectionSources/registrationInfo"
    $sourceMap = @{}
    foreach($node in $rootNodes.rootNodes){ $sourceMap[$node.rootNode.id] = $node.rootNode.name }

    $jobs = api get -v2 "data-protect/protection-groups?isDeleted=false&isActive=true"
    $reportRows = @()

    function Analyze-RunsForJobType {
        param(
            [Parameter(Mandatory=$true)]$Job,
            [Parameter(Mandatory=$true)][string]$RunTypesCsv,
            [Parameter(Mandatory=$true)][string]$TypeLabel
        )

        $uri = "data-protect/protection-groups/$($Job.id)/runs?numRuns=$numRuns&startTimeUsecs=$startUsecs&includeObjectDetails=true&includeTenants=true&runTypes=$RunTypesCsv"
        $runs = api get -v2 $uri
        if(-not $runs.runs){ return }

        $env = $Job.environment
        $runsSorted = $runs.runs | Sort-Object -Property @{ Expression = { $_.localBackupInfo.startTimeUsecs } } -Ascending
        $state = @{}

        foreach($run in $runsSorted){
            foreach($o in $run.objects){
                if($o.object.environment -ne $env){ continue }
                $objName = $o.object.name
                $sourceName = if($o.object.PSObject.Properties['sourceId']){
                    $id = $o.object.sourceId
                    if($sourceMap.ContainsKey($id)){ $sourceMap[$id] } else { $id }
                } else { $objName }

                $key = "$($Job.name);;$objName;;$sourceName;;$TypeLabel"
                if(-not $state.ContainsKey($key)){
                    $state[$key] = [ordered]@{
                        ConsecutiveFails = 0
                        LastSuccessUsecs = $null
                        LatestFailureUsecs = $null
                        Message = $null
                    }
                }

                $status = $o.localSnapshotInfo.snapshotInfo.status
                if($status -eq 'kSuccess' -or $status -eq 'kWarning'){
                    $state[$key].ConsecutiveFails = 0
                    $state[$key].LastSuccessUsecs = $run.localBackupInfo.startTimeUsecs
                }
                elseif($status -eq 'kFailed'){
                    $state[$key].ConsecutiveFails++
                    $state[$key].LatestFailureUsecs = $run.localBackupInfo.startTimeUsecs
                    if($o.localSnapshotInfo.failedAttempts){
                        $state[$key].Message = $o.localSnapshotInfo.failedAttempts[0].message
                    }
                }
            }
        }

        foreach($k in $state.Keys){
            $d = $state[$k]
            if($d.ConsecutiveFails -ge $failureCount){
                if(($null -eq $d.LastSuccessUsecs) -or ($d.LastSuccessUsecs -lt $d.LatestFailureUsecs)){
                    $jobName, $objectName, $sourceName, $typeLabel = $k -split ';;'
                    $lastSuccess = if($d.LastSuccessUsecs){ (usecsToDate $d.LastSuccessUsecs).ToString('yyyy-MM-dd HH:mm:ss') } else { 'Never' }
                    $msg = [string]$d.Message
                    if($msg){ $msg = ($msg -replace '[\\r\\n,]', ';'); if($msg.Length -gt 150){ $msg = $msg.Substring(0,150) } }

                    $reportRows += [pscustomobject]@{
                        JobName = $jobName
                        LastSuccessfulBackup = $lastSuccess
                        BackupType = $typeLabel
                        Source = $sourceName
                        Object = $objectName
                        ConsecutiveFailures = $d.ConsecutiveFails
                        Message = $msg
                    }
                }
            }
        }
    }

    foreach($job in $jobs.protectionGroups){
        Analyze-RunsForJobType -Job $job -RunTypesCsv "kSystem,kFull,kIncremental" -TypeLabel "Backup"
        Analyze-RunsForJobType -Job $job -RunTypesCsv "kLog" -TypeLabel "Log Backup"
    }

    $total = $reportRows.Count
    Write-Host "Total Consecutive Failures (≥$failureCount): $total" -ForegroundColor Gray

    if($total -gt 0){
        $consoleReport = $reportRows | Select-Object JobName, BackupType, Source, Object, ConsecutiveFailures, LastSuccessfulBackup
        $consoleReport = $consoleReport | Sort-Object -Property @{Expression={ $_.ConsecutiveFailures };Descending=$true}, @{Expression={ $_.JobName };Descending=$false}
        $consoleReport | Format-Table -AutoSize
        $reportRows | Export-Csv -Path $outfile -NoTypeInformation -Encoding UTF8
        Write-Host "Report saved to: $outfile" -ForegroundColor Cyan
    } else {
        Write-Host "No unresolved consecutive failures found in last $days days." -ForegroundColor Green
    }

    if($smtpServer -and $sendFrom -and $sendTo -and (Test-Path $outfile)){
        foreach($to in $sendTo){
            Send-MailMessage -From $sendFrom -To $to -SmtpServer $smtpServer -Port $smtpPort `
                -Subject "$ClusterName Consecutive Failure Report ($total failures)" `
                -Body "Total Consecutive Failures (≥$failureCount): $total" `
                -Attachments $outfile -WarningAction SilentlyContinue
        }
    }
}

# =====================================================================
#  Cluster selection (Helios)
# =====================================================================
if ($mcm) {
    try {
        $url = 'https://helios.cohesity.com/v2/mcm/cluster-mgmt/info'
        $resp = Invoke-WebRequest -Uri $url -Headers $commonHeaders -UseBasicParsing -Method GET
        $json = $resp.Content | ConvertFrom-Json
        $clusters = @($json.cohesityClusters)
        if ($allClusters) {
            foreach ($c in $clusters) {
                Run-ConsecutiveFailureReport -ClusterName $c.name
            }
            exit
        }
        elseif (-not $clusterName) {
            if ($clusters.Count -eq 1) {
                $clusterName = $clusters[0].name
                Write-Host "Detected single cluster: $clusterName" -ForegroundColor Cyan
            } else {
                Write-Host "Multiple clusters found. Use -clusterName or -allClusters" -ForegroundColor Yellow
                $clusters | ForEach-Object { Write-Host "  - $($_.name)" }
                exit 1
            }
        }
    } catch {
        Write-Host "Unable to fetch cluster list. Check API key or Helios access." -ForegroundColor Red
        exit 1
    }
}

# =====================================================================
#  Execute for chosen cluster
# =====================================================================
Run-ConsecutiveFailureReport -ClusterName $clusterName