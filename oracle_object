# --- robust epoch -> UTC converter (ms first; fallback to µs) ---
function Convert-ToUtcFromEpoch($v) {
    if ($null -eq $v -or $v -eq 0) { return $null }
    return [DateTimeOffset]::FromUnixTimeMilliseconds([int64]$v).UtcDateTime   # assumes ms, adjust if needed
}

# --- SETTINGS ---
$environments = @('kOracle','kSQL','kVMware')   # removed kPhysical
$reportDate   = Get-Date -Format "yyyy-MM-dd_HHmm"
$excelFile    = "BackupFailures_AllClusters_$reportDate.xlsx"
$firstSheet   = $true

# one Excel per run; delete if you want a fresh file
if (Test-Path $excelFile) { Remove-Item $excelFile -Force }

foreach ($env in $environments) {
    Write-Host "`n=== Environment: $env ==="
    $globalFailures = @()

    foreach ($cluster in $clusters) {
        $clusterId     = $cluster.id
        $cluster_name  = $cluster.name
        $pgUrl         = "https://your-api/clusters/$clusterId/protection-groups"

        $respPG = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
        $pgResponse = if ($respPG -and $respPG.PSObject.Properties['Content']) {
            if ($respPG.Content) { $respPG.Content | ConvertFrom-Json } else { $respPG }
        } else { $respPG }

        $pgs = $pgResponse.protectionGroups | Where-Object { $_.environment -eq $env }
        if (-not $pgs) { continue }

        foreach ($pg in $pgs) {
            $pgId          = $pg.id
            $pgName        = $pg.name
            $runUrl        = "https://your-api/protection-groups/$pgId/runs?numRuns=10"

            $respRuns = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Get
            $runs = if ($respRuns -and $respRuns.runs) { $respRuns.runs } else { @() }
            if (-not $runs) { continue }

            $flatRuns = foreach ($run in $runs) {
                if ($run.localBackupInfo -and $run.objects) {
                    foreach ($info in $run.localBackupInfo) {
                        [pscustomobject]@{
                            RunType          = $info.runType
                            Status           = $info.status
                            StartTimeUsecs   = $info.startTimeUsecs
                            EndTimeUsecs     = $info.endTimeUsecs
                            Cluster          = $cluster_name
                            ProtectionGroup  = $pgName
                            Objects          = $run.objects | Where-Object { $_.localSnapshotInfo.failedAttempts -and $_.localSnapshotInfo.failedAttempts.Count -gt 0 }
                        }
                    }
                }
            }

            if (-not $flatRuns) { continue }

            $grouped = $flatRuns | Group-Object RunType
            foreach ($g in $grouped) {
                $latestFailed = $g.Group | Where-Object { $_.Status -eq "Failed" } |
                                Sort-Object EndTimeUsecs -Descending | Select-Object -First 1
                if ($null -ne $latestFailed) {
                    $hasLaterSuccess = $g.Group | Where-Object {
                        $_.Status -eq "Succeeded" -and $_.StartTimeUsecs -gt $latestFailed.EndTimeUsecs
                    }
                    if (-not $hasLaterSuccess) {
                        $estZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
                        $startUtc = Convert-ToUtcFromEpoch $latestFailed.StartTimeUsecs
                        $endUtc   = Convert-ToUtcFromEpoch $latestFailed.EndTimeUsecs

                        foreach ($obj in $latestFailed.Objects) {
                            foreach ($fail in $obj.localSnapshotInfo.failedAttempts | Where-Object { $_ -ne $null -and $_.message -ne $null -and $_.message -ne "" }) {
                                $globalFailures += [pscustomobject]@{
                                    Cluster          = $latestFailed.Cluster
                                    ProtectionGroup  = $latestFailed.ProtectionGroup
                                    ObjectName       = $obj.object.name
                                    RunType          = $latestFailed.RunType
                                    Status           = $latestFailed.Status
                                    Message          = $fail.message
                                    StartTime        = if ($startUtc) { [System.TimeZoneInfo]::ConvertTimeFromUtc($startUtc, $estZone).ToString("dd/MM/yyyy HH:mm:ss") } else { "" }
                                    EndTime          = if ($endUtc) { [System.TimeZoneInfo]::ConvertTimeFromUtc($endUtc, $estZone).ToString("dd/MM/yyyy HH:mm:ss") } else { "" }
                                }

                                Write-Host "DB/Host: $($obj.object.name) | Message: $($fail.message)"
                            }
                        }
                    }
                }
            }
        }
    }

    if ($globalFailures.Count -gt 0) {
        $sheet = switch ($env) {
            'kOracle' { 'Oracle' }
            'kSQL'    { 'SQL' }
            'kVMware' { 'VMware' }
            default   { $env }
        }

        if ($firstSheet) {
            $globalFailures | Export-Excel -Path $excelFile -WorksheetName $sheet -AutoSize
            $firstSheet = $false
        } else {
            $globalFailures | Export-Excel -Path $excelFile -WorksheetName $sheet -AutoSize -Append
        }

        Write-Host "✔ Exported $($globalFailures.Count) rows to worksheet '$sheet'"
    } else {
        Write-Host "No unresolved failures found for $env"
    }
}

Write-Host "`nSaved Excel report with per-environment tabs: $excelFile"
