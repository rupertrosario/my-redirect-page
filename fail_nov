# Cohesity Helios ‚Äì STRIKE Report (Single Cluster, GET-only)
# ----------------------------------------------------------
# - Reads Helios API key from file path.
# - Runs only on ONE cluster (specified manually below).
# - 100% GET-only, safe to run.
# - Detects failed backups with no later success.

# =========================
# 0) API Key from your path
# =========================
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found at $apikeypath" }
$ApiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $ApiKey; "accept" = "application/json" }

Write-Host ""
Write-Host "============================================="
Write-Host "üö® Cohesity Helios STRIKE REPORT (Single Cluster)"
Write-Host "============================================="
Write-Host "READ-ONLY MODE ‚Äî GET requests only"
Write-Host ""

# =========================
# 1) Choose your Cluster
# =========================
# You can fetch ClusterId via: https://helios.cohesity.com/v2/mcm/cluster-mgmt/info
# Example: "1234567890123456789:1111111111111111111"
$cluster_id = "<PASTE-YOUR-CLUSTER-ID-HERE>"
$cluster_name = "<YOUR-CLUSTER-NAME>"

if (-not $cluster_id -or $cluster_id -eq "<PASTE-YOUR-CLUSTER-ID-HERE>") {
    throw "‚ö†Ô∏è Please set your cluster_id before running."
}

Write-Host "üîç Scanning cluster: $cluster_name ($cluster_id)..."
Write-Host ""

# =========================================================
# 2) Helper ‚Äì Convert usecs ‚Üí readable date
# =========================================================
function Convert-UsecsToDate($usecs) {
    if (-not $usecs) { return "-" }
    [DateTimeOffset]::FromUnixTimeMilliseconds([math]::Round($usecs / 1000)).LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss")
}

# =========================================================
# 3) Collect strike data for this cluster
# =========================================================
$AllRows = @()

# --- Get Protection Groups ---
$pgUrl = "https://helios.cohesity.com/v2/mcm/data-protect/protection-groups?clusterId=$cluster_id"
$pgResp = Invoke-WebRequest -Uri $pgUrl -Headers $commonHeaders -Method Get -UseBasicParsing
$pgs = ($pgResp.Content | ConvertFrom-Json).protectionGroups

foreach ($pg in $pgs) {
    $pgName = $pg.name
    $envType = $pg.environment -replace '^k',''
    $runsUrl = "https://helios.cohesity.com/v2/mcm/data-protect/protection-groups/runs?clusterId=$cluster_id&protectionGroupIds=$($pg.id)&numRuns=100"
    $runsResp = Invoke-WebRequest -Uri $runsUrl -Headers $commonHeaders -Method Get -UseBasicParsing
    $runs = ($runsResp.Content | ConvertFrom-Json).protectionRuns
    if (-not $runs) { continue }

    $flat = @()
    foreach ($r in $runs) {
        $runTime = $r.backupRun.base.startTimeUsecs
        $tasks = $r.backupRun.latestFinishedTasks
        if (-not $tasks) { continue }

        foreach ($t in $tasks) {
            $objName = $t.base.sources[0].source.displayName
            $status  = $t.base.publicStatus
            $err     = $t.base.error.errorMsg
            $flat += [PSCustomObject]@{
                ObjectName = $objName
                Status     = $status
                Error      = $err
                StartTime  = $runTime
            }
        }
    }

    # --- Strike Logic ---
    $grouped = $flat | Group-Object ObjectName
    foreach ($g in $grouped) {
        $runsForObj = $g.Group | Sort-Object StartTime -Descending
        if (-not $runsForObj) { continue }

        $latestFailure = $runsForObj | Where-Object { $_.Status -eq 'kFailure' } | Select-Object -First 1
        if (-not $latestFailure) { continue }

        $laterSuccess = $runsForObj | Where-Object {
            $_.Status -eq 'kSuccess' -and $_.StartTime -gt $latestFailure.StartTime
        }

        if (-not $laterSuccess) {
            $AllRows += [PSCustomObject]@{
                Cluster          = $cluster_name
                ProtectionGroup  = $pgName
                ObjectName       = $g.Name
                ObjectType       = $envType
                LastFailureTime  = (Convert-UsecsToDate $latestFailure.StartTime)
                ErrorMessage     = $latestFailure.Error
            }
        }
    }
}

# ==============================
# 4) Print Full Table
# ==============================
if ($AllRows.Count -eq 0) {
    Write-Host "‚úÖ No unrecovered failures found on $cluster_name." -ForegroundColor Green
    return
}

$AllRows | Sort-Object ProtectionGroup,ObjectName | Format-Table -AutoSize

# =========================================================
# 5) Summary
# =========================================================
Write-Host "`nSummary for Cluster: $cluster_name" -ForegroundColor Green
Write-Host "=========================" -ForegroundColor Green

$pgCount = ($AllRows.ProtectionGroup | Select-Object -Unique | Measure-Object).Count
$objCount = ($AllRows.ObjectName | Select-Object -Unique | Measure-Object).Count

Write-Host "  Failed PGs      : $pgCount"
Write-Host "  Failed Objects  : $objCount"
Write-Host "----------------------------------------"

# =========================================================
# 6) Export CSV
# =========================================================
$timestamp = (Get-Date).ToString("yyyy-MM-dd_HHmm")
$outfile = "$PSScriptRoot\Helios_StrikeReport_${cluster_name}_$timestamp.csv"
$AllRows | Export-Csv -NoTypeInformation -Path $outfile -Encoding UTF8
Write-Host "`nüìÅ CSV report saved to: $outfile" -ForegroundColor Yellow
Write-Host "`n‚úÖ Strike Report complete for cluster $cluster_name ‚Äî Read-only and GET-only." -ForegroundColor Green
