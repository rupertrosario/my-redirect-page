# Cohesity Helios ‚Äì STRIKE Report (GET-only, no try/catch)
# --------------------------------------------------------
# - Reads Helios API key from your provided path.
# - Uses /v2/mcm/cluster-mgmt/info to list clusters.
# - For each cluster, GETs Protection Groups and Runs.
# - Detects failed objects that have no later successful run.
# - Prints full details + per-cluster summary.
# - 100% GET-only, safe, and simple.

# =========================
# 0) API Key from your path
# =========================
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found at $apikeypath" }
$ApiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $ApiKey; "accept" = "application/json" }

Write-Host ""
Write-Host "============================================="
Write-Host "üö® Cohesity Helios STRIKE REPORT (GET-only)"
Write-Host "============================================="
Write-Host "READ-ONLY MODE ‚Äî Uses only GET requests"
Write-Host ""

# =========================================================
# 1) Get Clusters (ClusterName + ClusterId)
# =========================================================
$clusterUrl = "https://helios.cohesity.com/v2/mcm/cluster-mgmt/info"
$response  = Invoke-WebRequest -Method Get -Uri $clusterUrl -Headers $commonHeaders -UseBasicParsing
$json_clu  = $response.Content | ConvertFrom-Json
$json_clus = $json_clu.cohesityClusters

if (-not $json_clus) {
    throw "‚ùå No clusters found under Helios account."
}

Write-Host ("Found {0} clusters under Helios." -f $json_clus.Count)
Write-Host ""

# =========================================================
# 2) Helper ‚Äì Convert usecs ‚Üí readable date
# =========================================================
function Convert-UsecsToDate($usecs) {
    if (-not $usecs) { return "-" }
    [DateTimeOffset]::FromUnixTimeMilliseconds([math]::Round($usecs / 1000)).LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss")
}

# =========================================================
# 3) Collect strike data (failures with no later success)
# =========================================================
$AllRows = @()

foreach ($clus in $json_clus) {
    $cluster_name = $clus.clusterName
    $cluster_id   = $clus.clusterId
    Write-Host "üîç Scanning cluster: $cluster_name ($cluster_id)..."

    # --- Get Protection Groups ---
    $pgUrl = "https://helios.cohesity.com/v2/mcm/data-protect/protection-groups?clusterId=$cluster_id"
    $pgResp = Invoke-WebRequest -Uri $pgUrl -Headers $commonHeaders -Method Get -UseBasicParsing
    $pgs = ($pgResp.Content | ConvertFrom-Json).protectionGroups

    foreach ($pg in $pgs) {
        $pgName = $pg.name
        $envType = $pg.environment -replace '^k',''
        $runsUrl = "https://helios.cohesity.com/v2/mcm/data-protect/protection-groups/runs?clusterId=$cluster_id&protectionGroupIds=$($pg.id)&numRuns=100"
        $runsResp = Invoke-WebRequest -Uri $runsUrl -Headers $commonHeaders -Method Get -UseBasicParsing
        $runs = ($runsResp.Content | ConvertFrom-Json).protectionRuns
        if (-not $runs) { continue }

        $flat = @()
        foreach ($r in $runs) {
            $runTime = $r.backupRun.base.startTimeUsecs
            $tasks = $r.backupRun.latestFinishedTasks
            if (-not $tasks) { continue }

            foreach ($t in $tasks) {
                $objName = $t.base.sources[0].source.displayName
                $status  = $t.base.publicStatus
                $err     = $t.base.error.errorMsg
                $flat += [PSCustomObject]@{
                    ObjectName = $objName
                    Status     = $status
                    Error      = $err
                    StartTime  = $runTime
                }
            }
        }

        # --- Strike Logic ---
        $grouped = $flat | Group-Object ObjectName
        foreach ($g in $grouped) {
            $runsForObj = $g.Group | Sort-Object StartTime -Descending
            if (-not $runsForObj) { continue }

            $latestFailure = $runsForObj | Where-Object { $_.Status -eq 'kFailure' } | Select-Object -First 1
            if (-not $latestFailure) { continue }

            $laterSuccess = $runsForObj | Where-Object {
                $_.Status -eq 'kSuccess' -and $_.StartTime -gt $latestFailure.StartTime
            }

            if (-not $laterSuccess) {
                $AllRows += [PSCustomObject]@{
                    Cluster          = $cluster_name
                    ProtectionGroup  = $pgName
                    ObjectName       = $g.Name
                    ObjectType       = $envType
                    LastFailureTime  = (Convert-UsecsToDate $latestFailure.StartTime)
                    ErrorMessage     = $latestFailure.Error
                }
            }
        }
    }
}

# ==============================
# 4) Print Full Table
# ==============================
if ($AllRows.Count -eq 0) {
    Write-Host "‚úÖ No unrecovered failures found across all clusters." -ForegroundColor Green
    return
}

$AllRows | Sort-Object Cluster,ProtectionGroup,ObjectName | Format-Table -AutoSize

# =========================================================
# 5) Summary per cluster
# =========================================================
Write-Host "`nSummary (per cluster):" -ForegroundColor Green
Write-Host "=========================" -ForegroundColor Green

$byCluster = $AllRows | Group-Object Cluster | Sort-Object Name

foreach ($grp in $byCluster) {
    $cName = $grp.Name
    $pgCount = ($grp.Group.ProtectionGroup | Select-Object -Unique | Measure-Object).Count
    $objCount = ($grp.Group.ObjectName | Select-Object -Unique | Measure-Object).Count

    Write-Host "Cluster: $cName" -ForegroundColor Cyan
    Write-Host "  Failed PGs      : $pgCount"
    Write-Host "  Failed Objects  : $objCount"
    Write-Host "----------------------------------------"
}

# =========================================================
# 6) Export CSV
# =========================================================
$timestamp = (Get-Date).ToString("yyyy-MM-dd_HHmm")
$outfile = "$PSScriptRoot\Helios_StrikeReport_$timestamp.csv"
$AllRows | Export-Csv -NoTypeInformation -Path $outfile -Encoding UTF8
Write-Host "`nüìÅ CSV report saved to: $outfile" -ForegroundColor Yellow
Write-Host "`n‚úÖ Strike Report complete ‚Äî Read-only and 100% GET." -ForegroundColor Green
