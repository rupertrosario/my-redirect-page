# Cohesity Helios ‚Äì STRIKE Report (Single Cluster, RunType in Table, EST Time Format)
# ----------------------------------------------------------------------------------
# - Reads Helios API key from file
# - Runs on one cluster (set ID + Name below)
# - GET-only, no try/catch
# - Does NOT call runTypes= in URL
# - Extracts RunType locally, displays in table
# - Converts Start/End time to EST, dd/MM/yyyy HH:mm:ss
# - Only shows failures with no later success

# =========================
# 0) API Key from your path
# =========================
$apikeypath = "X:\PowerShell\Cohesity_API_Scripts\DO_NOT_Delete\apikey.txt"
if (-not (Test-Path $apikeypath)) { throw "API key file not found at $apikeypath" }
$ApiKey = (Get-Content -Path $apikeypath -Raw).Trim()
$commonHeaders = @{ "apiKey" = $ApiKey; "accept" = "application/json" }

Write-Host ""
Write-Host "============================================="
Write-Host "üö® Cohesity Helios STRIKE REPORT (Single Cluster)"
Write-Host "============================================="
Write-Host "READ-ONLY MODE ‚Äî GET requests only"
Write-Host ""

# =========================
# 1) Choose your Cluster
# =========================
# Get clusterId from: https://helios.cohesity.com/v2/mcm/cluster-mgmt/info
$cluster_id   = "<PASTE-YOUR-CLUSTER-ID-HERE>"
$cluster_name = "<YOUR-CLUSTER-NAME>"

if (-not $cluster_id -or $cluster_id -eq "<PASTE-YOUR-CLUSTER-ID-HERE>") {
    throw "‚ö†Ô∏è Please set your cluster_id before running."
}

Write-Host "üîç Scanning cluster: $cluster_name ($cluster_id)..."
Write-Host ""

# =========================================================
# 2) Helper ‚Äì Convert usecs ‚Üí EST datetime (dd/MM/yyyy HH:mm:ss)
# =========================================================
function Convert-UsecsToEST($usecs) {
    if (-not $usecs) { return "-" }
    $estZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
    $utcDate = [datetime]"1970-01-01"
    $utcDate = $utcDate.AddMilliseconds($usecs / 1000)
    return [System.TimeZoneInfo]::ConvertTimeFromUtc($utcDate, $estZone).ToString("dd/MM/yyyy HH:mm:ss")
}

# =========================================================
# 3) Collect strike data for this cluster
# =========================================================
$AllRows = @()
$numRuns = 10  # fetch last few runs only

# --- Get Protection Groups ---
$pgUrl = "https://helios.cohesity.com/v2/mcm/data-protect/protection-groups?clusterId=$cluster_id"
$pgResp = Invoke-WebRequest -Uri $pgUrl -Headers $commonHeaders -Method Get -UseBasicParsing
$pgs = ($pgResp.Content | ConvertFrom-Json).protectionGroups

foreach ($pg in $pgs) {
    $pgName  = $pg.name
    $envType = $pg.environment -replace '^k',''

    # --- Get recent runs (no runTypes in URL) ---
    $runsUrl  = "https://helios.cohesity.com/v2/mcm/data-protect/protection-groups/$($pg.id)/runs?clusterId=$cluster_id&numRuns=$numRuns"
    $runsResp = Invoke-WebRequest -Uri $runsUrl -Headers $commonHeaders -Method Get -UseBasicParsing
    $runs     = ($runsResp.Content | ConvertFrom-Json).protectionRuns
    if (-not $runs) { continue }

    $flatRuns = @()

    foreach ($r in $runs) {
        $runType = $r.backupRun.base.RunType -replace '^k',''
        $startUs = $r.backupRun.base.startTimeUsecs
        $endUs   = $r.backupRun.base.endTimeUsecs
        $tasks   = $r.backupRun.latestFinishedTasks
        if (-not $tasks) { continue }

        foreach ($t in $tasks) {
            $objName = $t.base.sources[0].source.displayName
            $status  = $t.base.publicStatus
            $err     = $t.base.error.errorMsg

            $flatRuns += [PSCustomObject]@{
                Cluster         = $cluster_name
                ProtectionGroup = $pgName
                ObjectName      = $objName
                ObjectType      = $envType
                RunType         = $runType
                Status          = if ($status -eq 'kSuccess') { 'Succeeded' } elseif ($status -eq 'kFailure') { 'Failed' } else { $status }
                Message         = $err
                StartTimeUsecs  = $startUs
                EndTimeUsecs    = $endUs
            }
        }
    }

    # --- Group by RunType (to check per-runType recovery) ---
    $grouped = $flatRuns | Group-Object RunType
    foreach ($g in $grouped) {
        $latestFailed = $g.Group | Where-Object { $_.Status -eq "Failed" } | Sort-Object EndTimeUsecs -Descending | Select-Object -First 1
        if ($null -ne $latestFailed) {
            $hasLaterSuccess = $g.Group | Where-Object {
                $_.Status -eq "Succeeded" -and $_.StartTimeUsecs -gt $latestFailed.EndTimeUsecs
            }
            if (-not $hasLaterSuccess) {
                $AllRows += [PSCustomObject]@{
                    Cluster         = $latestFailed.Cluster
                    ProtectionGroup = $latestFailed.ProtectionGroup
                    ObjectName      = $latestFailed.ObjectName
                    ObjectType      = $latestFailed.ObjectType
                    RunType         = $latestFailed.RunType
                    Status          = $latestFailed.Status
                    Message         = $latestFailed.Message
                    StartTime       = Convert-UsecsToEST $latestFailed.StartTimeUsecs
                    EndTime         = Convert-UsecsToEST $latestFailed.EndTimeUsecs
                }
            }
        }
    }
}

# ==============================
# 4) Print Full Table
# ==============================
if ($AllRows.Count -eq 0) {
    Write-Host "‚úÖ No unrecovered failures found on $cluster_name." -ForegroundColor Green
    return
}

$AllRows | Sort-Object ProtectionGroup,ObjectName | Format-Table -AutoSize

# =========================================================
# 5) Summary
# =========================================================
Write-Host "`nSummary for Cluster: $cluster_name" -ForegroundColor Green
Write-Host "=========================" -ForegroundColor Green
$pgCount  = ($AllRows.ProtectionGroup | Select-Object -Unique | Measure-Object).Count
$objCount = ($AllRows.ObjectName      | Select-Object -Unique | Measure-Object).Count
Write-Host "  Failed PGs     : $pgCount"
Write-Host "  Failed Objects : $objCount"
Write-Host "----------------------------------------"

# =========================================================
# 6) Export CSV
# =========================================================
$timestamp = (Get-Date).ToString("yyyy-MM-dd_HHmm")
$outfile   = "$PSScriptRoot\Helios_StrikeReport_${cluster_name}_$timestamp.csv"
$AllRows | Export-Csv -NoTypeInformation -Encoding UTF8 -Path $outfile
Write-Host "`nüìÅ CSV saved to: $outfile" -ForegroundColor Yellow
Write-Host "`n‚úÖ Strike Report complete for $cluster_name ‚Äî GET-only, safe." -ForegroundColor Green
