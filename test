# Define your clusters list explicitly (example with multiple clusters)
$clusters = @(
    @{ id = "cluster1-id"; name = "Cluster-A" },
    @{ id = "cluster2-id"; name = "Cluster-B" },
    @{ id = "cluster3-id"; name = "Cluster-C" }
)

# Store all final results across clusters
$globalFailures = @()

# Collect all Protection Groups from clusters and process one cluster at a time
foreach ($cluster in $clusters) {
    $clusterId = $cluster.id
    $clusterName = $cluster.name
    $pgUrl = "https://your-api/clusters/$clusterId/protection-groups"

    Write-Host "\n▶ Processing cluster: $clusterName ($clusterId)"

    $response = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
    $pgResponse = $response.Content | ConvertFrom-Json
    $pgs = $pgResponse.protectionGroups
    Write-Host "   → Found $($pgs.Count) protection groups."

    foreach ($pg in $pgs) {
        $pgId = $pg.id
        $pgName = $pg.name

        $runUrl = "https://your-api/protection-groups/$pgId/runs?numRuns=10"

        try {
            $response = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Get
            $runs = if ($response -and $response.runs) { $response.runs } else { @() }
            Write-Host "→ PG: $pgName - Runs fetched: $($runs.Count)"

            if (-not $runs) {
                Write-Host "   ⚠ No runs found for PG: $pgName in Cluster: $clusterName"
                continue
            }

            $flatRuns = @()
            foreach ($run in $runs) {
                if ($run.localBackupInfo) {
                    foreach ($info in $run.localBackupInfo) {
                        $flatRuns += [pscustomobject]@{
                            RunType         = $info.runType
                            Status          = $info.status
                            Message         = $info.message
                            StartTimeUsecs  = $info.startTimeUsecs
                            EndTimeUsecs    = $info.endTimeUsecs
                            Cluster         = $clusterName
                            ProtectionGroup = $pgName
                        }
                    }
                }
            }

            if ($flatRuns.Count -eq 0) {
                Write-Host "   ⚠ No backup entries in runs for PG: $pgName"
                continue
            }

            $grouped = $flatRuns | Group-Object RunType
            foreach ($g in $grouped) {
                $latestFailed = $g.Group | Where-Object { $_.Status -eq "Failed" } | Sort-Object EndTimeUsecs -Descending | Select-Object -First 1
                if ($null -ne $latestFailed) {
                    $hasLaterSuccess = $g.Group | Where-Object {
                        $_.Status -eq "Succeeded" -and $_.StartTimeUsecs -gt $latestFailed.EndTimeUsecs
                    }
                    if (-not $hasLaterSuccess) {
                        $estZone = [System.TimeZoneInfo]::FindSystemTimeZoneById("Eastern Standard Time")
                        $startUtc = [datetime]"1970-01-01".AddMilliseconds($latestFailed.StartTimeUsecs / 1000)
                        $endUtc   = [datetime]"1970-01-01".AddMilliseconds($latestFailed.EndTimeUsecs / 1000)

                        $globalFailures += [pscustomobject]@{
                            Cluster         = $latestFailed.Cluster
                            ProtectionGroup = $latestFailed.ProtectionGroup
                            RunType         = $latestFailed.RunType
                            Status          = $latestFailed.Status
                            Message         = $latestFailed.Message
                            StartTime       = [System.TimeZoneInfo]::ConvertTimeFromUtc($startUtc, $estZone).ToString("dd/MM/yyyy HH:mm:ss")
                            EndTime         = [System.TimeZoneInfo]::ConvertTimeFromUtc($endUtc, $estZone).ToString("dd/MM/yyyy HH:mm:ss")
                        }
                    }
                }
            }

        } catch {
            Write-Warning "Failed to get runs for Protection Group $pgName ($pgId)"
        }
    }
}

# Print one header and all failures + HTML export combined across clusters
if ($globalFailures.Count -gt 0) {
    Write-Host "\n=== Backup Failures Without Later Success Across All Clusters ==="
    $globalFailures | Format-Table Cluster, ProtectionGroup, RunType, Status, Message, StartTime, EndTime -AutoSize

    $reportDate = Get-Date -Format "yyyy-MM-dd_HHmm"
    $htmlFile = "BackupFailures_AllClusters_$reportDate.html"
    $excelFile = "BackupFailures_AllClusters_$reportDate.xlsx"

    $html = @"
<html>
<head>
    <link rel='stylesheet' href='https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css'>
    <script src='https://code.jquery.com/jquery-3.7.0.min.js'></script>
    <script src='https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js'></script>
    <style>
        body { font-family: Arial; color: #333333; }
        h2 { color: #B22222; }
        table { border-collapse: collapse; width: 100%; font-size: 0.9em; }
        th, td { border: 1px solid #dddddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
    </style>
</head>
<body>
    <h2>Backup Failures Without Later Success - All Clusters</h2>
    <table id="failureTable">
        <thead>
        <tr>
            <th>Cluster</th>
            <th>Protection Group</th>
            <th>Run Type</th>
            <th>Status</th>
            <th>Message</th>
            <th>Start Time</th>
            <th>End Time</th>
        </tr>
        </thead>
        <tbody>
"@

    foreach ($f in $globalFailures) {
        $html += "<tr><td>$($f.Cluster)</td><td>$($f.ProtectionGroup)</td><td>$($f.RunType)</td><td>$($f.Status)</td><td>$($f.Message)</td><td>$($f.StartTime)</td><td>$($f.EndTime)</td></tr>`n"
    }

    $html += @"
        </tbody>
    </table>
    <script>
        \$(document).ready(function() {
            \$('#failureTable').DataTable();
        });
    </script>
</body>
</html>
"@

    $html | Out-File -FilePath $htmlFile -Encoding UTF8
    Write-Host "Saved combined HTML report as: $htmlFile"

    # Export to Excel using ImportExcel module (assumes it's installed)
    $globalFailures | Export-Excel -Path $excelFile -AutoSize -Title "Backup Failures Without Later Success"
    Write-Host "Saved Excel report as: $excelFile"

} else {
    Write-Host "No unresolved backup failures found in any cluster."
}
