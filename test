# Collect all Protection Groups from clusters
$allProtectionGroups = @()

foreach ($cluster in $clusters) {
    $clusterId = $cluster.id
    $clusterName = $cluster.name
    $pgUrl = "https://your-api/clusters/$clusterId/protection-groups"

    try {
        $pgResponse = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
        foreach ($pg in $pgResponse.protectionGroups) {
            $allProtectionGroups += [pscustomobject]@{
                ClusterId         = $clusterId
                ClusterName       = $clusterName
                ProtectionGroupId = $pg.id
                ProtectionGroup   = $pg.name
            }
        }
    } catch {
        Write-Warning "Failed to fetch protection groups for cluster: $clusterName ($clusterId)"
    }
}

# Combined result for all protection groups
$finalResult = @()

# Run failure detection per protection group
foreach ($pg in $allProtectionGroups) {
    $pgId = $pg.ProtectionGroupId
    $pgName = $pg.ProtectionGroup
    $clusterName = $pg.ClusterName

    $runUrl = "https://your-api/protection-groups/$pgId/runs"
    $body = @{ limit = 50 } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Post -Body $body -ContentType "application/json"
        $json = $response.content | ConvertFrom-Json
        $runs = $json.runs
        if (-not $runs) { continue }

        # Flatten localBackupInfo
        $flatRuns = @()
        foreach ($run in $runs) {
            foreach ($info in $run.localBackupInfo) {
                $flatRuns += [pscustomobject]@{
                    RunType         = $info.runType
                    Status          = $info.status
                    Message         = $info.message
                    StartTimeUsecs  = $info.startTimeUsecs
                    EndTimeUsecs    = $info.endTimeUsecs
                    Cluster         = $clusterName
                    ProtectionGroup = $pgName
                }
            }
        }

        # Get only the latest failure for each RunType
        $latestFailures = $flatRuns |
            Where-Object { $_.Status -eq "Failed" } |
            Sort-Object RunType, StartTimeUsecs -Descending |
            Group-Object RunType | ForEach-Object { $_.Group | Select-Object -First 1 }

        $successes = $flatRuns | Where-Object { $_.Status -eq "Succeeded" }

        foreach ($fail in $latestFailures) {
            $hasLaterSuccess = $successes | Where-Object {
                $_.RunType -eq $fail.RunType -and $_.StartTimeUsecs -gt $fail.EndTimeUsecs
            }
            if (-not $hasLaterSuccess) {
                $finalResult += [pscustomobject]@{
                    Cluster         = $fail.Cluster
                    ProtectionGroup = $fail.ProtectionGroup
                    RunType         = $fail.RunType
                    Status          = $fail.Status
                    Message         = $fail.Message
                    StartTime       = [datetime]"1970-01-01".AddMilliseconds($fail.StartTimeUsecs / 1000).ToString("dd/MM/yyyy HH:mm:ss")
                    EndTime         = [datetime]"1970-01-01".AddMilliseconds($fail.EndTimeUsecs / 1000).ToString("dd/MM/yyyy HH:mm:ss")
                }
            }
        }

    } catch {
        Write-Warning "Failed to get runs for Protection Group $pgName ($pgId)"
    }
}

# Final output
if ($finalResult.Count -gt 0) {
    $finalResult | Format-Table Cluster, ProtectionGroup, RunType, Status, Message, StartTime, EndTime
}
