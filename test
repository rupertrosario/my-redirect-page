# Define your clusters list explicitly (example with multiple clusters)
$clusters = @(
    @{ id = "cluster1-id"; name = "Cluster-A" },
    @{ id = "cluster2-id"; name = "Cluster-B" },
    @{ id = "cluster3-id"; name = "Cluster-C" }
)

# Collect all Protection Groups from clusters
$allProtectionGroups = @()

foreach ($cluster in $clusters) {
    $clusterId = $cluster.id
    $clusterName = $cluster.name
    $pgUrl = "https://your-api/clusters/$clusterId/protection-groups"

    Write-Host "\n▶ Processing cluster: $clusterName ($clusterId)"

    $response = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
    $pgResponse = $response.Content | ConvertFrom-Json
    $pgs = $pgResponse.protectionGroups
    Write-Host "   → Found $($pgs.Count) protection groups."
    foreach ($pg in $pgs) {
        $allProtectionGroups += [pscustomobject]@{
            ClusterId         = $clusterId
            ClusterName       = $clusterName
            ProtectionGroupId = $pg.id
            ProtectionGroup   = $pg.name
        }
    }
}

# Output to file for further processing
$pgExportFile = "allProtectionGroups.json"
$allProtectionGroups | ConvertTo-Json -Depth 3 | Set-Content -Path $pgExportFile -Encoding UTF8
Write-Host "\n✅ Exported all protection groups to: $pgExportFile"

# Load protection groups from file
$rawPGs = Get-Content -Path $pgExportFile -Raw | ConvertFrom-Json
$allProtectionGroups = if ($rawPGs -is [System.Collections.IEnumerable]) { @($rawPGs) } else { $rawPGs }

# Store all final results
$allFailures = @()

foreach ($pg in $allProtectionGroups) {
    $pgId = $pg.ProtectionGroupId
    $pgName = $pg.ProtectionGroup
    $clusterName = $pg.ClusterName

    $runUrl = "https://your-api/protection-groups/$pgId/runs?numRuns=10"

    try {
        $response = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Get
        $runs = if ($response -and $response.runs) { $response.runs } else { @() }
        Write-Host "→ PG: $pgName - Runs fetched: $($runs.Count)"

        if (-not $runs) {
            Write-Host "   ⚠ No runs found for PG: $pgName in Cluster: $clusterName"
            continue
        }

        $flatRuns = @()
        foreach ($run in $runs) {
            if ($run.localBackupInfo) {
                foreach ($info in $run.localBackupInfo) {
                    $flatRuns += [pscustomobject]@{
                        RunType         = $info.runType
                        Status          = $info.status
                        Message         = $info.message
                        StartTimeUsecs  = $info.startTimeUsecs
                        EndTimeUsecs    = $info.endTimeUsecs
                        Cluster         = $clusterName
                        ProtectionGroup = $pgName
                    }
                }
            }
        }

        if ($flatRuns.Count -eq 0) {
            Write-Host "   ⚠ No backup entries in runs for PG: $pgName"
            continue
        }

        $grouped = $flatRuns | Group-Object RunType
        foreach ($g in $grouped) {
            $latestFailed = $g.Group | Where-Object { $_.Status -eq "Failed" } | Sort-Object EndTimeUsecs -Descending | Select-Object -First 1
            if ($null -ne $latestFailed) {
                $hasLaterSuccess = $g.Group | Where-Object {
                    $_.Status -eq "Succeeded" -and $_.StartTimeUsecs -gt $latestFailed.EndTimeUsecs
                }
                if (-not $hasLaterSuccess) {
                    $allFailures += [pscustomobject]@{
                        Cluster         = $latestFailed.Cluster
                        ProtectionGroup = $latestFailed.ProtectionGroup
                        RunType         = $latestFailed.RunType
                        Status          = $latestFailed.Status
                        Message         = $latestFailed.Message
                        StartTime       = "({0})" -f ([datetime]"1970-01-01".AddMilliseconds($latestFailed.StartTimeUsecs / 1000).ToString("dd/MM/yyyy HH:mm:ss"))
                        EndTime         = "({0})" -f ([datetime]"1970-01-01".AddMilliseconds($latestFailed.EndTimeUsecs / 1000).ToString("dd/MM/yyyy HH:mm:ss"))
                    }
                }
            }
        }

    } catch {
        Write-Warning "Failed to get runs for Protection Group $pgName ($pgId)"
    }
}

# Print one header and all failures + HTML export
if ($allFailures.Count -gt 0) {
    Write-Host "\n=== Backup Failures Without Later Success ==="
    $allFailures | Format-Table Cluster, ProtectionGroup, RunType, Status, Message, StartTime, EndTime -AutoSize

    $reportDate = Get-Date -Format "yyyy-MM-dd_HHmm"
    $htmlFile = "BackupFailures_$reportDate.html"

    $html = @"
<html>
<head>
    <style>
        body { font-family: Arial; color: #333333; }
        h2 { color: #B22222; }
        table { border-collapse: collapse; width: 100%; font-size: 0.9em; }
        th, td { border: 1px solid #dddddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
    </style>
</head>
<body>
    <h2>Backup Failures Without Later Success</h2>
    <table>
        <tr>
            <th>Cluster</th>
            <th>Protection Group</th>
            <th>Run Type</th>
            <th>Status</th>
            <th>Message</th>
            <th>Start Time</th>
            <th>End Time</th>
        </tr>
"@

    foreach ($f in $allFailures) {
        $html += "<tr><td>$($f.Cluster)</td><td>$($f.ProtectionGroup)</td><td>$($f.RunType)</td><td>$($f.Status)</td><td>$($f.Message)</td><td>$($f.StartTime)</td><td>$($f.EndTime)</td></tr>`n"
    }

    $html += @"
    </table>
</body>
</html>
"@

    $html | Out-File -FilePath $htmlFile -Encoding UTF8
    Write-Host "Saved HTML report as: $htmlFile"
} else {
    Write-Host "No unresolved backup failures found."
}
