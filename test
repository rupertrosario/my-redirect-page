# Define your clusters list explicitly (example with multiple clusters)
$clusters = @(
    @{ id = "cluster1-id"; name = "Cluster-A" },
    @{ id = "cluster2-id"; name = "Cluster-B" },
    @{ id = "cluster3-id"; name = "Cluster-C" }
)

# Collect all Protection Groups from clusters
$allProtectionGroups = @()

foreach ($cluster in $clusters) {
    $clusterId = $cluster.id
    $clusterName = $cluster.name
    $pgUrl = "https://your-api/clusters/$clusterId/protection-groups"

    try {
        $pgResponse = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
        foreach ($pg in $pgResponse.protectionGroups) {
            $allProtectionGroups += [pscustomobject]@{
                ClusterId         = $clusterId
                ClusterName       = $clusterName
                ProtectionGroupId = $pg.id
                ProtectionGroup   = $pg.name
            }
        }
    } catch {
        Write-Warning "Failed to fetch protection groups for cluster: $clusterName ($clusterId)"
    }
}

# Store all final results
$allFailures = @()

# Check for failed backups with no later success
foreach ($pg in $allProtectionGroups) {
    $pgId = $pg.ProtectionGroupId
    $pgName = $pg.ProtectionGroup
    $clusterName = $pg.ClusterName

    $runUrl = "https://your-api/protection-groups/$pgId/runs?numRuns=10"

    try {
        $response = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Get
        $json = $response | ConvertFrom-Json
        $runs = if ($json -and $json.runs) { $json.runs } else { @() }
        if (-not $runs) { continue }

        $flatRuns = @()
        foreach ($run in $runs) {
            if ($run.localBackupInfo) {
                foreach ($info in $run.localBackupInfo) {
                    $flatRuns += [pscustomobject]@{
                        RunType         = $info.runType
                        Status          = $info.status
                        Message         = $info.message
                        StartTimeUsecs  = $info.startTimeUsecs
                        EndTimeUsecs    = $info.endTimeUsecs
                        Cluster         = $clusterName
                        ProtectionGroup = $pgName
                    }
                }
            }
        }

        if ($flatRuns.Count -eq 0) {
            continue
        }

        $failures = $flatRuns | Where-Object { $_.Status -eq "Failed" }
        $successes = $flatRuns | Where-Object { $_.Status -eq "Succeeded" }

        $latestFailures = $failures |
            Sort-Object RunType, StartTimeUsecs -Descending |
            Group-Object RunType | ForEach-Object { $_.Group | Select-Object -First 1 }

        foreach ($fail in $latestFailures) {
            $hasLaterSuccess = $successes | Where-Object {
                $_.RunType -eq $fail.RunType -and $_.StartTimeUsecs -gt $fail.EndTimeUsecs
            }
            if (-not $hasLaterSuccess) {
                $allFailures += [pscustomobject]@{
                    Cluster         = $fail.Cluster
                    ProtectionGroup = $fail.ProtectionGroup
                    RunType         = $fail.RunType
                    Status          = $fail.Status
                    Message         = $fail.Message
                    StartTime       = [datetime]"1970-01-01".AddMilliseconds($fail.StartTimeUsecs / 1000).ToString("dd/MM/yyyy HH:mm:ss")
                    EndTime         = [datetime]"1970-01-01".AddMilliseconds($fail.EndTimeUsecs / 1000).ToString("dd/MM/yyyy HH:mm:ss")
                }
            }
        }

    } catch {
        Write-Warning "Failed to get runs for Protection Group $pgName ($pgId)"
    }
}

# Print one header and all failures + HTML export
if ($allFailures.Count -gt 0) {
    Write-Host "=== Backup Failures Without Later Success ==="
    $allFailures | Format-Table Cluster, ProtectionGroup, RunType, Status, Message, StartTime, EndTime -AutoSize

    $reportDate = Get-Date -Format "yyyy-MM-dd_HHmm"
    $htmlFile = "BackupFailures_$reportDate.html"

    $html = @"
<html>
<head>
    <style>
        body { font-family: Arial; color: #333333; }
        h2 { color: #B22222; }
        table { border-collapse: collapse; width: 100%; font-size: 0.9em; }
        th, td { border: 1px solid #dddddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        tr:nth-child(even) { background-color: #f9f9f9; }
    </style>
</head>
<body>
    <h2>Backup Failures Without Later Success</h2>
    <table>
        <tr>
            <th>Cluster</th>
            <th>Protection Group</th>
            <th>Run Type</th>
            <th>Status</th>
            <th>Message</th>
            <th>Start Time</th>
            <th>End Time</th>
        </tr>
"@

    foreach ($f in $allFailures) {
        $html += "<tr><td>$($f.Cluster)</td><td>$($f.ProtectionGroup)</td><td>$($f.RunType)</td><td>$($f.Status)</td><td>$($f.Message)</td><td>$($f.StartTime)</td><td>$($f.EndTime)</td></tr>`n"
    }

    $html += @"
    </table>
</body>
</html>
"@

    $html | Out-File -FilePath $htmlFile -Encoding UTF8
    Write-Host "Saved HTML report as: $htmlFile"
} else {
    Write-Host "No unresolved backup failures found."
}
