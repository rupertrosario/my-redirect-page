# Collect all Protection Groups from clusters
$allProtectionGroups = @()

foreach ($cluster in $clusters) {
    $clusterId = $cluster.id
    $clusterName = $cluster.name
    $pgUrl = "https://your-api/clusters/$clusterId/protection-groups"

    try {
        $pgResponse = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
        foreach ($pg in $pgResponse.protectionGroups) {
            $allProtectionGroups += [pscustomobject]@{
                ClusterId         = $clusterId
                ClusterName       = $clusterName
                ProtectionGroupId = $pg.id
                ProtectionGroup   = $pg.name
            }
        }
    } catch {
        Write-Warning "Failed to fetch protection groups for cluster: $clusterName ($clusterId)"
    }
}

# Run failure detection per protection group
foreach ($pg in $allProtectionGroups) {
    $pgId = $pg.ProtectionGroupId
    $pgName = $pg.ProtectionGroup
    $clusterName = $pg.ClusterName

    $runUrl = "https://your-api/protection-groups/$pgId/runs"
    $body = @{ limit = 50 } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Post -Body $body -ContentType "application/json"
        $json = $response.content | ConvertFrom-Json
        $runs = $json.runs
        if (-not $runs) { continue }

        $result = @()

        foreach ($run in $runs) {
            foreach ($info in $run.localBackupInfo) {
                $runType = $info.runType
                $status = $info.status
                $message = $info.message
                $start = $info.startTimeUsecs
                $end = $info.endTimeUsecs

                if ($status -eq "Failed") {
                    $hasLaterSuccess = ($runs | Where-Object {
                        ($_local = $_.localBackupInfo | Where-Object {
                            $_.runType -eq $runType -and $_.status -eq "Succeeded" -and $_.startTimeUsecs -gt $end
                        }) -ne $null
                    }).Count -gt 0

                    if (-not $hasLaterSuccess) {
                        $result += [pscustomobject]@{
                            Cluster         = $clusterName
                            ProtectionGroup = $pgName
                            RunType         = $runType
                            Status          = $status
                            Message         = $message
                            StartTimeUsecs  = $start
                            EndTimeUsecs    = $end
                        }
                    }
                }
            }
        }

        # Output if any issues
        if ($result.Count -gt 0) {
            Write-Host "`n⚠️ Issues found for PG: $pgName in Cluster: $clusterName" -ForegroundColor Yellow
            $result | Format-Table
        }

    } catch {
        Write-Warning "Failed to get runs for Protection Group $pgName ($pgId)"
    }
}
