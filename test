# Collect all Protection Groups from clusters
$allProtectionGroups = @()

foreach ($cluster in $clusters) {
    $clusterId = $cluster.id
    $clusterName = $cluster.name
    $pgUrl = "https://your-api/clusters/$clusterId/protection-groups"

    try {
        $pgResponse = Invoke-RestMethod -Uri $pgUrl -Headers $headers -Method Get
        foreach ($pg in $pgResponse.protectionGroups) {
            $allProtectionGroups += [pscustomobject]@{
                ClusterId         = $clusterId
                ClusterName       = $clusterName
                ProtectionGroupId = $pg.id
                ProtectionGroup   = $pg.name
            }
        }
    } catch {
        Write-Warning "Failed to fetch protection groups for cluster: $clusterName ($clusterId)"
    }
}

# Run failure detection per protection group
foreach ($pg in $allProtectionGroups) {
    $pgId = $pg.ProtectionGroupId
    $pgName = $pg.ProtectionGroup
    $clusterName = $pg.ClusterName

    $runUrl = "https://your-api/protection-groups/$pgId/runs"
    $body = @{ limit = 50 } | ConvertTo-Json

    try {
        $response = Invoke-RestMethod -Uri $runUrl -Headers $headers -Method Post -Body $body -ContentType "application/json"
        $runs = $response.runs
        if (-not $runs) { continue }

        $result = @()

        # Failed kRegular
        $failedKRegular = $runs | Where-Object { $_.runType -eq "kRegular" -and $_.status -eq "Failed" }
        foreach ($fail in $failedKRegular) {
            $hasLaterSuccess = ($runs | Where-Object {
                $_.runType -eq "kRegular" -and $_.status -eq "Succeeded" -and $_.startTimeUsecs -gt $fail.endTimeUsecs
            }).Count -gt 0
            if (-not $hasLaterSuccess) {
                $result += [pscustomobject]@{
                    Cluster        = $clusterName
                    ProtectionGroup = $pgName
                    RunType        = "kRegular"
                    Status         = "Failed"
                    StartTimeUsecs = $fail.startTimeUsecs
                    EndTimeUsecs   = $fail.endTimeUsecs
                }
            }
        }

        # Failed kLog
        $failedKLog = $runs | Where-Object { $_.runType -eq "kLog" -and $_.status -eq "Failed" }
        foreach ($fail in $failedKLog) {
            $hasLaterSuccess = ($runs | Where-Object {
                $_.runType -eq "kLog" -and $_.status -eq "Succeeded" -and $_.startTimeUsecs -gt $fail.endTimeUsecs
            }).Count -gt 0
            if (-not $hasLaterSuccess) {
                $result += [pscustomobject]@{
                    Cluster        = $clusterName
                    ProtectionGroup = $pgName
                    RunType        = "kLog"
                    Status         = "Failed"
                    StartTimeUsecs = $fail.startTimeUsecs
                    EndTimeUsecs   = $fail.endTimeUsecs
                }
            }
        }

        # Output if any issues
        if ($result.Count -gt 0) {
            Write-Host "`n⚠️ Issues found for PG: $pgName in Cluster: $clusterName" -ForegroundColor Yellow
            $result | Format-Table
        }

    } catch {
        Write-Warning "Failed to get runs for Protection Group $pgName ($pgId)"
    }
}
