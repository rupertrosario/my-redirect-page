# === ONE-RUN, ONE-TABLE (JOINED BY DBName) ===
$apikey = Read-Host "Enter Your API Key"
$clustersAvailable = @(
    "8823423-23423-23423-23434 whatever"
    "052248592834423 whatever"
)

$oneGiB  = 1073741824
$regRows = @()   # Script 1 rows (registration / DB attributes)
$pgRows  = @()   # Script 2 rows (PG/policy/host info)

foreach ($cluster in $clustersAvailable) {
    $cluster_id, $cluster_name = $cluster -split " "
    $headers = @{
        apiKey          = $apikey
        accessClusterId = $cluster_id
    }

    # ---------- Script 1 (DB attributes) ----------
    $body1 = @{
        environments                = "Oracle"
        includeDBApplicationInfo    = "true"
        includeApplicationsTreeInfo = "true"
        allUnderHierarchy           = "true"
        includeData                 = "true"
    }
    $response1 = Invoke-WebRequest -Method Get -Uri "https://helios.cohesity.com/irisservices/api/v1/public/protectionSources/registrationInfo" -Headers $headers -Body $body1
    $json1     = $response1.Content | ConvertFrom-Json

    # Safely walk arrays to reach oracleProtectionSource nodes
    $db_nodes = @()
    foreach ($root in ($json1.rootNodes | Where-Object { $_ })) {
      foreach ($app in ($root.applications | Where-Object { $_ })) {
        foreach ($ati in ($app.applicationTreeInfo | Where-Object { $_ })) {
          $ora = $ati.protectionSource.oracleProtectionSource
          if ($ora) { $db_nodes += $ora }
        }
      }
    }

    foreach ($node in $db_nodes) {
        $regRows += [PSCustomObject]@{
            Cluster            = $cluster_name
            DBName             = $node.databaseUniqueName
            DBVersion          = $node.version
            ArchiveLog_Enabled = $node.archiveLogEnabled
            DB_Type            = $node.dbType
            DB_Size_in_GB      = [math]::Round((($node.size | ForEach-Object { $_ }) / $oneGiB), 4)
            DB_Instances       = $node.dbInstanceId
            CPU_Count          = (($node.hosts.sessions.systemIdentifier) -join ',')
            System_Location    = (($node.hosts.sessions.location) -join ',')
            SharedPool_Size    = $node.sgaTargetSize
            Fragment_Size      = $node.sharedPoolSize
            FRA_Size_in_GB     = [math]::Round((($node.fraSize | ForEach-Object { $_ }) / $oneGiB), 4)
        }
    }

    # ---------- Script 2 (PG/Policy/Host) ----------
    $body2 = @{
        environments        = "Oracle"
        isDeleted           = "False"
        isActive            = "True"
        includesLastRunInfo = "True"
    }
    $response2 = Invoke-WebRequest -Method Get -Uri "https://helios.cohesity.com/v2/data-protect/protection-groups" -Headers $headers -Body $body2
    $json2     = $response2.Content | ConvertFrom-Json

    foreach ($dbd in ($json2.protectionGroups | Where-Object { $_ })) {
        foreach ($channels in ($dbd.oracleParams.objects | Where-Object { $_ })) {
            foreach ($channel in ($channels.dbParams.dbChannels | Where-Object { $_ })) {
                $policyName = (
                    Invoke-RestMethod -Uri "https://helios.cohesity.com/v2/data-protect/policies?ids=$($dbd.policyId)" `
                                      -Headers $headers -Method Get -ErrorAction Stop
                ).policies | Where-Object { $_.id -eq $dbd.policyId } | Select-Object -ExpandProperty name -First 1

                # --- Hostname EXACTLY as you wrote it ---
                $HostName = $(
                    try {
                        $hostId     = $channel.databaseNodeList.hostId
                        $ipAPIurl   = "https://helios.cohesity.com/v2/data-protect/objects/$hostId"
                        $ipResponse = Invoke-WebRequest -Method Get -Uri $ipAPIurl -Headers $headers
                        $ipJson     = $ipResponse.Content | ConvertFrom-Json
                        $ip         = $ipJson.name
                        [system.net.dns]::GetHostEntry($ip).HostName
                    }
                    catch { $nameOrIp = $ip }   # kept EXACT
                )

                $pgRows += [PSCustomObject]@{
                    Cluster            = $cluster_name
                    PGName             = $dbd.name
                    PolicyName         = $policyName
                    SourceName         = $channels.SourceName
                    DBName             = $channel.databaseUniqueName
                    PersistMountPoints = $dbd.oracleParams.persistMountPoints
                    LogRetentionDays   = $channel.archiveLogRetentionDays
                    ChannelCount       = $channel.databaseNodeList.ChannelCount
                    Port               = $channel.databaseNodeList.port
                    HostName           = $HostName
                }
            }
        }
    }
}

# ---------- JOIN BOTH OUTPUTS BY DBName (case-insensitive) ----------
# Build a lookup from Script 2 (PG/Policy/Host) by DBName. If there are multiple rows per DB, the last wins (as-is logic).
$ix = New-Object System.Collections.Hashtable ([StringComparer]::OrdinalIgnoreCase)
foreach ($r in $pgRows) { $ix[$r.DBName] = $r }

$final = @()

# Left join: all DBs from Script 1, enrich with Script 2 when present
foreach ($a in $regRows) {
    $b = $ix[$a.DBName]
    $final += [PSCustomObject]@{
        Cluster            = $a.Cluster
        DBName             = $a.DBName
        HostName           = if ($b) { $b.HostName } else { "" }
        PGName             = if ($b) { $b.PGName } else { "" }
        PolicyName         = if ($b) { $b.PolicyName } else { "" }
        SourceName         = if ($b) { $b.SourceName } else { "" }
        PersistMountPoints = if ($b) { $b.PersistMountPoints } else { "" }
        LogRetentionDays   = if ($b) { $b.LogRetentionDays } else { "" }
        ChannelCount       = if ($b) { $b.ChannelCount } else { "" }
        Port               = if ($b) { $b.Port } else { "" }

        DBVersion          = $a.DBVersion
        ArchiveLog_Enabled = $a.ArchiveLog_Enabled
        DB_Type            = $a.DB_Type
        DB_Size_in_GB      = $a.DB_Size_in_GB
        DB_Instances       = $a.DB_Instances
        CPU_Count          = $a.CPU_Count
        System_Location    = $a.System_Location
        SharedPool_Size    = $a.SharedPool_Size
        Fragment_Size      = $a.Fragment_Size
        FRA_Size_in_GB     = $a.FRA_Size_in_GB
    }
}

# (Optional) include DBs that exist only in Script 2 but not in Script 1
$onlyInPg = $pgRows | Where-Object { -not ($regRows.DBName -contains $_.DBName) }
foreach ($b in $onlyInPg) {
    $final += [PSCustomObject]@{
        Cluster            = $b.Cluster
        DBName             = $b.DBName
        HostName           = $b.HostName
        PGName             = $b.PGName
        PolicyName         = $b.PolicyName
        SourceName         = $b.SourceName
        PersistMountPoints = $b.PersistMountPoints
        LogRetentionDays   = $b.LogRetentionDays
        ChannelCount       = $b.ChannelCount
        Port               = $b.Port

        DBVersion          = ""
        ArchiveLog_Enabled = ""
        DB_Type            = ""
        DB_Size_in_GB      = ""
        DB_Instances       = ""
        CPU_Count          = ""
        System_Location    = ""
        SharedPool_Size    = ""
        Fragment_Size      = ""
        FRA_Size_in_GB     = ""
    }
}

# ---------- ONE CLEAN TABLE (aligned by DBName) ----------
$final = $final | Sort-Object Cluster, DBName

# Pin column order for display (and CSV)
$cols = @(
  'Cluster','DBName','HostName','PGName','PolicyName','SourceName',
  'PersistMountPoints','LogRetentionDays','ChannelCount','Port',
  'DBVersion','ArchiveLog_Enabled','DB_Type','DB_Size_in_GB','DB_Instances',
  'CPU_Count','System_Location','SharedPool_Size','Fragment_Size','FRA_Size_in_GB'
)
$final = $final | Select-Object $cols

# Show one table with all details from both APIs
$final | Format-Table -AutoSize -Wrap

# Optional: export with the same order
# $stamp = Get-Date -Format "yyyy-MM-dd_HHmm"
# $final | Export-Csv -Path "C:\Cohesity_API\Logs\Oracle_DB_Combined_$stamp.csv" -NoTypeInformation
