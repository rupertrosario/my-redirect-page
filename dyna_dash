export default async function () {
  console.log("üöÄ Cohesity Helios ‚Äì Capacity + Garbage (GET-only, dashboard-ready)");

  const apiKey  = "PASTE_YOUR_API_KEY_HERE";
  const baseUrl = "https://helios.cohesity.com";
  const oneTiB  = 1099511627776;
  const headers = { accept: "application/json", apiKey };

  // 1Ô∏è‚É£ Get clusters
  const resp = await fetch(`${baseUrl}/v2/mcm/cluster-mgmt/info`, { headers });
  if (resp.status !== 200) throw new Error(`Cluster list HTTP ${resp.status}`);
  const data = await resp.json();

  const clusters = data?.cohesityClusters?.map(c => ({
    clusterName: c.clusterName,
    clusterId:   c.clusterId
  })) || [];

  const results = [];

  // 2Ô∏è‚É£ Capacity + Garbage
  for (const c of clusters) {
    const h = { ...headers, accessClusterId: c.clusterId };

    const capResp = await fetch(`${baseUrl}/irisservices/api/v1/public/stats/storage`, { headers: h });
    if (capResp.status !== 200) continue;
    const s = await capResp.json();

    const totalTiB = +(s.totalCapacityBytes / oneTiB).toFixed(2);
    const usedTiB  = +(s.localUsageBytes / oneTiB).toFixed(2);
    const availTiB = +(s.localAvailableBytes / oneTiB).toFixed(2);
    const consumed = +((s.localUsageBytes / s.totalCapacityBytes) * 100).toFixed(2);

    const garResp = await fetch(`${baseUrl}/irisservices/api/v1/public/mcm/stats/garbageData`, { headers: h });
    const g = garResp.status === 200 ? await garResp.json() : {};
    const garbageBytes = g?.garbageDataBytes ?? 0;
    const garbageGB = +(garbageBytes / (1024 ** 3)).toFixed(2);
    const garbageTB = +(garbageBytes / (1024 ** 4)).toFixed(3);

    results.push({
      clusterName: c.clusterName,
      clusterId: c.clusterId,
      totalTiB, usedTiB, availTiB, consumedPercent: consumed,
      garbageGB, garbageTB
    });
  }

  console.log("üìÑ Dashboard data:");
  console.log(JSON.stringify(results, null, 2));
  return { clusters: results };
}
